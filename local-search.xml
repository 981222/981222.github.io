<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java反射</title>
    <link href="/2020/12/29/office/Java%E5%8F%8D%E5%B0%84/"/>
    <url>/2020/12/29/office/Java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>待续…</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2020/12/29/office/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2020/12/29/office/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="1-并行和并发有什么区别？"><a href="#1-并行和并发有什么区别？" class="headerlink" title="1.并行和并发有什么区别？"></a>1.并行和并发有什么区别？</h2><ul><li><p>并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。</p></li><li><p>并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。</p></li><li><p>在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。</p></li></ul><p>所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。</p><h2 id="2-线程和进程的区别？"><a href="#2-线程和进程的区别？" class="headerlink" title="2.线程和进程的区别？"></a>2.线程和进程的区别？</h2><p>简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。</p><h2 id="3-守护线程是什么？"><a href="#3-守护线程是什么？" class="headerlink" title="3.守护线程是什么？"></a>3.守护线程是什么？</h2><p>守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。</p><h2 id="4-创建线程有哪几种方式？"><a href="#4-创建线程有哪几种方式？" class="headerlink" title="4.创建线程有哪几种方式？"></a>4.创建线程有哪几种方式？</h2><h3 id="1-继承Thread类创建线程类"><a href="#1-继承Thread类创建线程类" class="headerlink" title="1.继承Thread类创建线程类"></a>1.继承Thread类创建线程类</h3><ul><li><p>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</p></li><li><p>创建Thread子类的实例，即创建了线程对象。</p></li><li><p>调用线程对象的start()方法来启动该线程。</p></li></ul><h3 id="2-通过Runnable接口创建线程类"><a href="#2-通过Runnable接口创建线程类" class="headerlink" title="2.通过Runnable接口创建线程类"></a>2.通过Runnable接口创建线程类</h3><ul><li><p>定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</p></li><li><p>创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</p></li><li><p>调用线程对象的start()方法来启动该线程。</p></li></ul><h3 id="3-通过Callable和Future创建线程"><a href="#3-通过Callable和Future创建线程" class="headerlink" title="3.通过Callable和Future创建线程"></a>3.通过Callable和Future创建线程</h3><ul><li><p>创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</p></li><li><p>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</p></li><li><p>使用FutureTask对象作为Thread对象的target创建并启动新线程。</p></li><li><p>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。需要注意的是在获取返回值时，获取返回值的线程会进入阻塞状态等待子线程结束后的返回值。</p></li></ul><h2 id="5-runnable-和-callable-有什么区别？"><a href="#5-runnable-和-callable-有什么区别？" class="headerlink" title="5.runnable 和 callable 有什么区别？"></a>5.runnable 和 callable 有什么区别？</h2><ul><li><p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；</p></li><li><p>Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p></li></ul><h2 id="6-线程有哪些状态？"><a href="#6-线程有哪些状态？" class="headerlink" title="6.线程有哪些状态？"></a>6.线程有哪些状态？</h2><p>线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。</p><ul><li><p>创建状态。在生成线程对象，并没有调用该对象的start方法，这时线程处于创建状态。</p></li><li><p>就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，等待线程调度程序调度运行。</p></li><li><p>运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。</p></li><li><p>阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。</p></li><li><p>死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 　　</p></li></ul><h2 id="7-sleep-和-wait-有什么区别？"><a href="#7-sleep-和-wait-有什么区别？" class="headerlink" title="7.sleep() 和 wait() 有什么区别？"></a>7.sleep() 和 wait() 有什么区别？</h2><ul><li><p>sleep()：sleep()方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep() 方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。</p></li><li><p>wait()：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程</p></li></ul><h2 id="8-锁池和等待池？"><a href="#8-锁池和等待池？" class="headerlink" title="8.锁池和等待池？"></a>8.锁池和等待池？</h2><ul><li><p>锁池:假设线程A已经拥有了某个对象(注意:不是类)的锁，而其它的线程想要调用这个对象的某个synchronized方法(或者synchronized块)，由于这些线程在进入对象的synchronized方法之前必须先获得该对象的锁的拥有权，但是该对象的锁目前正被线程A拥有，所以这些线程就进入了该对象的锁池中。</p></li><li><p>等待池:假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁后，进入到了该对象的等待池中</p></li></ul><h2 id="9-notify-和-notifyAll-有什么区别？"><a href="#9-notify-和-notifyAll-有什么区别？" class="headerlink" title="9.notify()和 notifyAll()有什么区别？"></a>9.notify()和 notifyAll()有什么区别？</h2><ul><li><p>如果线程调用了对象的wait()方法，那么线程便会处于该对象的<strong>等待池</strong>中，等待池中的线程<strong>不会去竞争该对象的锁</strong>。</p></li><li><p>当有线程调用了对象的 <strong>notifyAll()</strong> 方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争</p></li><li><p>优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它<strong>还会留在锁池中</strong>，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</p></li></ul><h2 id="10-线程的-run-和-start-有什么区别？"><a href="#10-线程的-run-和-start-有什么区别？" class="headerlink" title="10.线程的 run()和 start()有什么区别？"></a>10.线程的 run()和 start()有什么区别？</h2><ul><li><p>每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。</p></li><li><p>start()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码； 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， 这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。</p></li></ul><h2 id="11-创建线程池有哪几种方式？"><a href="#11-创建线程池有哪几种方式？" class="headerlink" title="11.创建线程池有哪几种方式？"></a>11.创建线程池有哪几种方式？</h2><h3 id="1-newFixedThreadPool-int-nThreads"><a href="#1-newFixedThreadPool-int-nThreads" class="headerlink" title="1.newFixedThreadPool(int nThreads)"></a>1.newFixedThreadPool(int nThreads)</h3><p>创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。</p><h3 id="2-newCachedThreadPool"><a href="#2-newCachedThreadPool" class="headerlink" title="2.newCachedThreadPool()"></a>2.newCachedThreadPool()</h3><p>创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。</p><h3 id="3-newSingleThreadExecutor"><a href="#3-newSingleThreadExecutor" class="headerlink" title="3.newSingleThreadExecutor()"></a>3.newSingleThreadExecutor()</h3><p>这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。</p><h3 id="4-newScheduledThreadPool-int-corePoolSize"><a href="#4-newScheduledThreadPool-int-corePoolSize" class="headerlink" title="4.newScheduledThreadPool(int corePoolSize)"></a>4.newScheduledThreadPool(int corePoolSize)</h3><p>创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。</p><h2 id="12-线程池都有哪些状态？"><a href="#12-线程池都有哪些状态？" class="headerlink" title="12.线程池都有哪些状态？"></a>12.线程池都有哪些状态？</h2><p>线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated。</p><p>线程池各个状态切换框架图：</p><p><img src="/img/posts/java/Thread_Pool.png" title="线程池状态切换图"></p><h3 id="1-RUNNING"><a href="#1-RUNNING" class="headerlink" title="1.RUNNING"></a>1.RUNNING</h3><ul><li><p>状态说明：线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理。 </p></li><li><p>状态切换：线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建，就处于RUNNING状态，并且线程池中的任务数为0。</p></li></ul><h3 id="2-SHUTDOWN"><a href="#2-SHUTDOWN" class="headerlink" title="2.SHUTDOWN"></a>2.SHUTDOWN</h3><ul><li><p>状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务。 </p></li><li><p>状态切换：调用线程池的shutdown()接口时，线程池由RUNNING -&gt; SHUTDOWN。</p></li></ul><h3 id="3-STOP"><a href="#3-STOP" class="headerlink" title="3.STOP"></a>3.STOP</h3><ul><li><p>状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。 </p></li><li><p>状态切换：调用线程池的shutdownNow()接口时，线程池由(RUNNING or SHUTDOWN ) -&gt; STOP。</p></li></ul><h3 id="4-TIDYING"><a href="#4-TIDYING" class="headerlink" title="4.TIDYING"></a>4.TIDYING</h3><ul><li><p>状态说明：当所有的任务已终止，线程池中记录的”任务数量”为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。terminated()在ThreadPoolExecutor类中是空的，若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重载terminated()函数来实现。 </p></li><li><p>状态切换：当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN -&gt; TIDYING。 当线程池在STOP状态下，线程池中执行的任务为空时，就会由STOP -&gt; TIDYING。</p></li></ul><h3 id="5-TERMINATED"><a href="#5-TERMINATED" class="headerlink" title="5.TERMINATED"></a>5.TERMINATED</h3><ul><li><p>状态说明：线程池彻底终止，就变成TERMINATED状态。 </p></li><li><p>状态切换：线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -&gt; TERMINATED。</p></li></ul><h2 id="13-线程池中-submit-和-execute-方法有什么区别？"><a href="#13-线程池中-submit-和-execute-方法有什么区别？" class="headerlink" title="13.线程池中 submit()和 execute()方法有什么区别？"></a>13.线程池中 submit()和 execute()方法有什么区别？</h2><ul><li><p>接收的参数不一样。</p></li><li><p>submit有返回值，而execute没有。</p></li><li><p>submit方便Exception处理。</p></li></ul><h2 id="14-在java程序中怎么保证多线程的运行安全？"><a href="#14-在java程序中怎么保证多线程的运行安全？" class="headerlink" title="14.在java程序中怎么保证多线程的运行安全？"></a>14.在java程序中怎么保证多线程的运行安全？</h2><p>线程安全在三个方面体现：</p><ul><li><p>原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）。</p></li><li><p>可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）。</p></li><li><p>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。</p></li></ul><h2 id="15-多线程锁的升级原理是什么？"><a href="#15-多线程锁的升级原理是什么？" class="headerlink" title="15.多线程锁的升级原理是什么？"></a>15.多线程锁的升级原理是什么？</h2><p>在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。</p><p>锁升级的图示过程： </p><p><img src="/img/posts/java/Lock_Upgrade.png" title="锁升级的过程"></p><blockquote><p>锁共有4种状态详解: <a href="http://ifeve.com/java-synchronized/">http://ifeve.com/java-synchronized/</a></p></blockquote><h2 id="16-什么是死锁？"><a href="#16-什么是死锁？" class="headerlink" title="16.什么是死锁？"></a>16.什么是死锁？</h2><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。</p><p>死锁的代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeadLock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建两个对象</span><br>        Object o1 = <span class="hljs-keyword">new</span> Object();<br>        Object o2 = <span class="hljs-keyword">new</span> Object();<br>        <span class="hljs-comment">// 两个线程公用两个对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread1(o1,o2);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread2(o1,o2);<br>        <span class="hljs-comment">// 开启两个线程</span><br>        <span class="hljs-comment">// 以下线程在锁住o1（o2）对象后等待一秒过去正打算锁住o2（o1）对象，但是发现o2（o1）对象已经被锁住。</span><br>        <span class="hljs-comment">// 这时两个线程将会进入到对象锁的锁池中等待，直至其中一个线程解锁对象（这是不可能滴...）。</span><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Thread1</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.o1 = o1;<br>        <span class="hljs-keyword">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (o1)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (o2)&#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Thread2</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.o1 = o1;<br>        <span class="hljs-keyword">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (o2)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (o1)&#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="17-怎么防止死锁？"><a href="#17-怎么防止死锁？" class="headerlink" title="17.怎么防止死锁？"></a>17.怎么防止死锁？</h2><p>死锁的四个必要条件：</p><ul><li><p>互斥条件：线程对所分配到的资源不允许其他线程进行访问，若其他线程访问该资源，只能等待，直至占有该资源的线程使用完成后释放该资源。</p></li><li><p>请求和保持条件：线程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他线程占有，此事请求阻塞，但又对自己获得的资源保持不放。</p></li><li><p>不可剥夺条件：是指线程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放。</p></li><li><p>环路等待条件：是指线程发生死锁后，若干线程之间形成一种头尾相接的循环等待资源关系。</p></li></ul><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。<br>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。<br>所以，在系统设计、线程调度等方面注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免线程永久占据系统资源。<br>此外，也要防止线程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</p><h2 id="18-ThreadLocal-是什么？有哪些使用场景？"><a href="#18-ThreadLocal-是什么？有哪些使用场景？" class="headerlink" title="18.ThreadLocal 是什么？有哪些使用场景？"></a>18.ThreadLocal 是什么？有哪些使用场景？</h2><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。<br>Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。<br>但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。<br>任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p><h2 id="19-synchronized-底层实现原理？"><a href="#19-synchronized-底层实现原理？" class="headerlink" title="19.synchronized 底层实现原理？"></a>19.synchronized 底层实现原理？</h2><p>synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。</p><p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p><ul><li><p>普通同步方法，锁是当前实例对象</p></li><li><p>静态同步方法，锁是当前类的class对象</p></li><li><p>同步方法块，锁是括号里面的对象</p></li></ul><h2 id="20-synchronized-和-volatile-的区别是什么？"><a href="#20-synchronized-和-volatile-的区别是什么？" class="headerlink" title="20.synchronized 和 volatile 的区别是什么？"></a>20.synchronized 和 volatile 的区别是什么？</h2><ul><li><p>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</p></li><li><p>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。</p></li><li><p>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。</p></li><li><p>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</p></li><li><p>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</p></li></ul><h2 id="21-synchronized-和-Lock-有什么区别？"><a href="#21-synchronized-和-Lock-有什么区别？" class="headerlink" title="21.synchronized 和 Lock 有什么区别？"></a>21.synchronized 和 Lock 有什么区别？</h2><ul><li><p>首先synchronized是java内置关键字，在jvm层面，Lock是个java类；</p></li><li><p>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</p></li><li><p>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</p></li><li><p>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</p></li><li><p>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；</p></li><li><p>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</p></li></ul><h2 id="22-synchronized-和-ReentrantLock-区别是什么？"><a href="#22-synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="22.synchronized 和 ReentrantLock 区别是什么？"></a>22.synchronized 和 ReentrantLock 区别是什么？</h2><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。<br>既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量。</p><p>ReentrantLock比synchronized的扩展性体现在几点上： </p><ul><li><p>ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 </p></li><li><p>ReentrantLock可以获取各种锁的信息</p></li><li><p>ReentrantLock可以灵活地实现多路通知 </p></li></ul><p>并且二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word。</p><h2 id="23-atomic的原理？"><a href="#23-atomic的原理？" class="headerlink" title="23.atomic的原理？"></a>23.atomic的原理？</h2><p>Atomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。</p><p>Atomic系列的类中的核心方法都会调用unsafe类中的几个本地方法。我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java容器</title>
    <link href="/2020/12/27/office/Java%E5%AE%B9%E5%99%A8/"/>
    <url>/2020/12/27/office/Java%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h1><h2 id="1-java容器都有哪些？"><a href="#1-java容器都有哪些？" class="headerlink" title="1.java容器都有哪些？"></a>1.java容器都有哪些？</h2><p>常用容器的图录：</p><p><img src="/img/posts/java/Java_Container.png" title="Java容器图录"></p><h2 id="2-Collection-和-Collections-有什么区别？"><a href="#2-Collection-和-Collections-有什么区别？" class="headerlink" title="2.Collection 和 Collections 有什么区别？"></a>2.Collection 和 Collections 有什么区别？</h2><ul><li><p>java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</p></li><li><p>Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</p></li></ul><h2 id="3-List、Set、Map-之间的区别是什么？"><a href="#3-List、Set、Map-之间的区别是什么？" class="headerlink" title="3.List、Set、Map 之间的区别是什么？"></a>3.List、Set、Map 之间的区别是什么？</h2><p><img src="/img/posts/java/List_Set_Map.png" title="List、Set、Map之间的区别"></p><h2 id="4-HashMap-和-Hashtable-有什么区别？"><a href="#4-HashMap-和-Hashtable-有什么区别？" class="headerlink" title="4.HashMap 和 Hashtable 有什么区别？"></a>4.HashMap 和 Hashtable 有什么区别？</h2><ul><li><p>hashMap去掉了HashTable 的contains方法，但是加上了containsValue（）和containsKey（）方法。</p></li><li><p>hashTable同步的，而HashMap是非同步的，效率上比hashTable要高。</p></li><li><p>hashMap允许空键值，而hashTable不允许。</p></li></ul><h2 id="5-如何决定使用-HashMap-还是-TreeMap？"><a href="#5-如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="5.如何决定使用 HashMap 还是 TreeMap？"></a>5.如何决定使用 HashMap 还是 TreeMap？</h2><ul><li><p>TreeMap&lt;K,V&gt;的Key值是要求实现java.lang.Comparable，所以迭代的时候TreeMap默认是按照Key值升序排序的；TreeMap的实现是基于红黑树结构。适用于按自然顺序或自定义顺序遍历键（key）。</p></li><li><p>HashMap&lt;K,V&gt;的Key值实现散列hashCode()，分布是散列的、均匀的，不支持排序；数据结构主要是桶(数组)，链表或红黑树。适用于在Map中插入、删除和定位元素。</p></li></ul><p>如果你需要得到一个有序的结果时就应该使用TreeMap（因为HashMap中元素的排列顺序是不固定的）。除此之外，由于HashMap有更好的性能，所以大多不需要排序的时候我们会使用HashMap。</p><h2 id="6-说一下-HashMap-的实现原理？"><a href="#6-说一下-HashMap-的实现原理？" class="headerlink" title="6.说一下 HashMap 的实现原理？"></a>6.说一下 HashMap 的实现原理？</h2><p>HashMap概述：HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </p><p>HashMap的数据结构：在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p><p>当我们往Hashmap中put元素时，首先根据key的hashcode重新计算hash值，根据hash值得到这个元素在数组中的位置(下标)，如果该数组在该位置上已经存放了其他元素，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放入链尾。如果数组中该位置没有元素，就直接将该元素放到数组的该位置上。</p><p>需要注意 JDK 1.8 中对HashMap的实现做了优化，当链表中的节点数据超过八个之后，该链表会转为红黑树来提高查询效率，从原来的O(n)到O(logn)</p><h2 id="7-说一下-HashSet-的实现原理？"><a href="#7-说一下-HashSet-的实现原理？" class="headerlink" title="7.说一下 HashSet 的实现原理？"></a>7.说一下 HashSet 的实现原理？</h2><ul><li><p>HashSet底层由HashMap实现。</p></li><li><p>HashSet的值存放于HashMap的key上。</p></li><li><p>HashMap的value统一为PRESENT。</p></li></ul><h2 id="8-ArrayList-和-LinkedList-的区别是什么？"><a href="#8-ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="8.ArrayList 和 LinkedList 的区别是什么？"></a>8.ArrayList 和 LinkedList 的区别是什么？</h2><p>最明显的区别是 ArrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p><h2 id="9-如何实现数组和-List-之间的转换？"><a href="#9-如何实现数组和-List-之间的转换？" class="headerlink" title="9.如何实现数组和 List 之间的转换？"></a>9.如何实现数组和 List 之间的转换？</h2><ul><li><p>List转换成为数组：调用ArrayList的toArray方法。</p></li><li><p>数组转换成为List：调用Arrays的asList方法。</p></li></ul><h2 id="10-ArrayList-和-Vector-的区别是什么？"><a href="#10-ArrayList-和-Vector-的区别是什么？" class="headerlink" title="10.ArrayList 和 Vector 的区别是什么？"></a>10.ArrayList 和 Vector 的区别是什么？</h2><ul><li><p>Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。 </p></li><li><p>ArrayList比Vector快，它因为有同步，不会过载。 </p></li><li><p>ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</p></li></ul><h2 id="11-Array-和-ArrayList-有何区别？"><a href="#11-Array-和-ArrayList-有何区别？" class="headerlink" title="11.Array 和 ArrayList 有何区别？"></a>11.Array 和 ArrayList 有何区别？</h2><ul><li><p>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。 </p></li><li><p>Array是指定大小后不可变的，而ArrayList大小是可变的。 </p></li><li><p>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</p></li></ul><h2 id="12-在-Queue-中-poll-和-remove-有什么区别？"><a href="#12-在-Queue-中-poll-和-remove-有什么区别？" class="headerlink" title="12.在 Queue 中 poll()和 remove()有什么区别？"></a>12.在 Queue 中 poll()和 remove()有什么区别？</h2><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p><h2 id="13-哪些集合类是线程安全的？"><a href="#13-哪些集合类是线程安全的？" class="headerlink" title="13.哪些集合类是线程安全的？"></a>13.哪些集合类是线程安全的？</h2><ul><li><p>vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。</p></li><li><p>statck：堆栈类，先进后出。</p></li><li><p>hashtable：就比hashmap多了个线程安全。</p></li><li><p>enumeration：枚举，相当于迭代器。</p></li></ul><h2 id="14-迭代器-Iterator-是什么？"><a href="#14-迭代器-Iterator-是什么？" class="headerlink" title="14.迭代器 Iterator 是什么？"></a>14.迭代器 Iterator 是什么？</h2><p>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。</p><h2 id="15-Iterator-怎么使用？有什么特点？"><a href="#15-Iterator-怎么使用？有什么特点？" class="headerlink" title="15.Iterator 怎么使用？有什么特点？"></a>15.Iterator 怎么使用？有什么特点？</h2><p>Java中的Iterator功能比较简单，并且只能单向移动：</p><ol><li><p>使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p></li><li><p>使用next()获得序列中的下一个元素。</p></li><li><p>使用hasNext()检查序列中是否还有元素。</p></li><li><p>使用remove()将迭代器新返回的元素删除。　</p></li></ol><p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p><h2 id="16-Iterator-和-ListIterator-有什么区别？"><a href="#16-Iterator-和-ListIterator-有什么区别？" class="headerlink" title="16.Iterator 和 ListIterator 有什么区别？"></a>16.Iterator 和 ListIterator 有什么区别？</h2><ul><li><p>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 </p></li><li><p>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 </p></li><li><p>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2020/12/27/office/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/12/27/office/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="1-JDK-和-JRE-有什么区别？"><a href="#1-JDK-和-JRE-有什么区别？" class="headerlink" title="1.JDK 和 JRE 有什么区别？"></a>1.JDK 和 JRE 有什么区别？</h2><ul><li><p>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</p></li><li><p>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</p></li></ul><p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p><h2 id="2-和-equals-的区别是什么？"><a href="#2-和-equals-的区别是什么？" class="headerlink" title="2.== 和 equals 的区别是什么？"></a>2.== 和 equals 的区别是什么？</h2><h3 id="解读"><a href="#解读" class="headerlink" title="== 解读"></a>== 解读</h3><p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p><ul><li><p>基本类型：比较的是值是否相同；</p></li><li><p>引用类型：比较的是引用是否相同；</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String x = <span class="hljs-string">&quot;string&quot;</span>;<br>String y = <span class="hljs-string">&quot;string&quot;</span>;<br>String z = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;string&quot;</span>);<br>System.out.println(x==y); <span class="hljs-comment">// true</span><br>System.out.println(x==z); <span class="hljs-comment">// false</span><br>System.out.println(x.equals(y)); <span class="hljs-comment">// true</span><br>System.out.println(x.equals(z)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。</p><h3 id="equals-解读"><a href="#equals-解读" class="headerlink" title="equals 解读"></a>equals 解读</h3><p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。</p><p>首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br>Cat c1 = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;王磊&quot;</span>);<br>Cat c2 = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;王磊&quot;</span>);<br>System.out.println(c1.equals(c2)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>原来 equals 本质上就是 ==。</p><p>那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;老王&quot;</span>);<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;老王&quot;</span>);<br>System.out.println(s1.equals(s2)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        String anotherString = (String)anObject;<br>        <span class="hljs-keyword">int</span> n = value.length;<br>        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>            <span class="hljs-keyword">char</span> v1[] = value;<br>            <span class="hljs-keyword">char</span> v2[] = anotherString.value;<br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。</p><p><strong>总结：</strong>== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重写了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p><h2 id="3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？"></a>3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h2><p>不对，两个对象的 hashCode()相同，equals()不一定 true。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1 = <span class="hljs-string">&quot;通话&quot;</span>;<br>String str2 = <span class="hljs-string">&quot;重地&quot;</span>;<br>System.out.println(String.format(<span class="hljs-string">&quot;str1：%d | str2：%d&quot;</span>,  str1.hashCode(),str2.hashCode())); <span class="hljs-comment">// str1：1179395 | str2：1179395</span><br>System.out.println(str1.equals(str2)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>代码解读：很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p><h2 id="4-final-在-java-中有什么作用？"><a href="#4-final-在-java-中有什么作用？" class="headerlink" title="4.final 在 java 中有什么作用？"></a>4.final 在 java 中有什么作用？</h2><ul><li><p>final 修饰的类叫最终类，该类不能被继承。</p></li><li><p>final 修饰的方法不能被重写。</p></li><li><p>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</p></li></ul><h2 id="5-java-中的-Math-round-1-5-等于多少？"><a href="#5-java-中的-Math-round-1-5-等于多少？" class="headerlink" title="5.java 中的 Math.round(-1.5) 等于多少？"></a>5.java 中的 Math.round(-1.5) 等于多少？</h2><p>等于 -1。</p><h2 id="6-String-属于基础的数据类型吗？"><a href="#6-String-属于基础的数据类型吗？" class="headerlink" title="6.String 属于基础的数据类型吗？"></a>6.String 属于基础的数据类型吗？</h2><p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p><h2 id="7-java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#7-java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="7.java 中操作字符串都有哪些类？它们之间有什么区别？"></a>7.java 中操作字符串都有哪些类？它们之间有什么区别？</h2><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p><p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p><p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p><h2 id="8-String-str-“i”-与-String-str-new-String-“i”-一样吗？"><a href="#8-String-str-“i”-与-String-str-new-String-“i”-一样吗？" class="headerlink" title="8.String str = “i” 与 String str = new String(“i”) 一样吗？"></a>8.String str = “i” 与 String str = new String(“i”) 一样吗？</h2><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。</p><h2 id="9-如何将字符串反转？"><a href="#9-如何将字符串反转？" class="headerlink" title="9.如何将字符串反转？"></a>9.如何将字符串反转？</h2><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// StringBuffer reverse</span><br>StringBuffer stringBuffer = <span class="hljs-keyword">new</span> StringBuffer();<br>stringBuffer.append(<span class="hljs-string">&quot;abcdefg&quot;</span>);<br>System.out.println(stringBuffer.reverse()); <span class="hljs-comment">// gfedcba</span><br><br><span class="hljs-comment">// StringBuilder reverse</span><br>StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>stringBuilder.append(<span class="hljs-string">&quot;abcdefg&quot;</span>);<br>System.out.println(stringBuilder.reverse()); <span class="hljs-comment">// gfedcba</span><br></code></pre></td></tr></table></figure><h2 id="10-String-类的常用方法都有那些？"><a href="#10-String-类的常用方法都有那些？" class="headerlink" title="10.String 类的常用方法都有那些？"></a>10.String 类的常用方法都有那些？</h2><ul><li><p>s.length()：返回字符串长度。</p></li><li><p>s.trim()：去除字符串两端空白。</p></li><li><p>s.getBytes()：返回字符串的 byte 类型数组。</p></li><li><p>s.toLowerCase()：将字符串转成小写字母。</p></li><li><p>s.toUpperCase()：将字符串转成大写字符。</p></li><li><p>indexOf(String s)：返回指定字符第一次出现的索引。</p></li><li><p>lastIndexOf(String s): 返回指定字符最后一次出现的索引。</p></li><li><p>charAt(int index)：返回指定索引处的字符。</p></li><li><p>replace(String old, String new)：字符串替换。</p></li><li><p>split(String s)：分割字符串，返回一个分割后的字符串数组。</p></li><li><p>substring(int start, int end)：截取字符串。</p></li><li><p>equals(String targetString)：字符串比较。</p></li></ul><h2 id="11-抽象类必须要有抽象方法吗？"><a href="#11-抽象类必须要有抽象方法吗？" class="headerlink" title="11.抽象类必须要有抽象方法吗？"></a>11.抽象类必须要有抽象方法吗？</h2><p>不需要，抽象类不一定非要有抽象方法。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">base</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码，抽象类并没有抽象方法但完全可以正常运行。</p><h2 id="12-普通类和抽象类有哪些区别？"><a href="#12-普通类和抽象类有哪些区别？" class="headerlink" title="12.普通类和抽象类有哪些区别？"></a>12.普通类和抽象类有哪些区别？</h2><ul><li><p>普通类不能包含抽象方法，抽象类可以包含抽象方法。</p></li><li><p>抽象类不能直接实例化，普通类可以直接实例化。</p></li></ul><h2 id="13-抽象类能使用-final-修饰吗？"><a href="#13-抽象类能使用-final-修饰吗？" class="headerlink" title="13.抽象类能使用 final 修饰吗？"></a>13.抽象类能使用 final 修饰吗？</h2><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，编辑器也会提示错误信息：</p><p><code>Illegal combination of modifiers: &#39;final&#39; and &#39;abstract&#39;</code></p><h2 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14.接口和抽象类有什么区别？"></a>14.接口和抽象类有什么区别？</h2><ul><li><p>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</p></li><li><p>构造函数：抽象类可以有构造函数；接口不能有。</p></li><li><p>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。</p></li><li><p>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</p></li><li><p>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</p></li></ul><h2 id="15-java-中-IO-流分为几种？"><a href="#15-java-中-IO-流分为几种？" class="headerlink" title="15.java 中 IO 流分为几种？"></a>15.java 中 IO 流分为几种？</h2><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p><h2 id="16-BIO、NIO、AIO-有什么区别？"><a href="#16-BIO、NIO、AIO-有什么区别？" class="headerlink" title="16.BIO、NIO、AIO 有什么区别？"></a>16.BIO、NIO、AIO 有什么区别？</h2><ul><li><p>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</p></li><li><p>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</p></li><li><p>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</p></li></ul><h2 id="17-Files的常用方法都有哪些？"><a href="#17-Files的常用方法都有哪些？" class="headerlink" title="17.Files的常用方法都有哪些？"></a>17.Files的常用方法都有哪些？</h2><ul><li><p>Files.exists()：检测文件路径是否存在。</p></li><li><p>Files.createFile()：创建文件。</p></li><li><p>Files.createDirectory()：创建文件夹。</p></li><li><p>Files.delete()：删除一个文件或目录。</p></li><li><p>Files.copy()：将文件复制到目标文件。</p></li><li><p>Files.move()：移动文件或重命名为目标文件。</p></li><li><p>Files.size()：返回文件的大小(以字节为单位)。</p></li><li><p>Files.read()：读取文件。</p></li><li><p>Files.write()：写入文件。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法详解</title>
    <link href="/2020/12/16/markdown/Markdown%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/12/16/markdown/Markdown%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>.md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言。现在很多前段项目中的说明文件readme等都是用.md文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个程序猿更要学会使用这种语言。下面就简单和大家分享一些.md基本语法。</p></blockquote><h3 id="一、基本符号：-gt"><a href="#一、基本符号：-gt" class="headerlink" title="一、基本符号：* - +. &gt;"></a>一、基本符号：* - +. &gt;</h3><blockquote><p>基本上所有的markdown标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。</p></blockquote><hr><h3 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h3><ol><li>前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><ol start="2"><li>相当于标签闭合</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题 #<br>## 二级标题 ##<br>### 三级标题 ###<br>#### 四级标题 ####<br>##### 五级标题 #####<br>###### 六级标题 #####<br></code></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h3 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h3><ol><li>无序列表</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">+</span> a<br><span class="hljs-bullet">-</span> b<br><span class="hljs-bullet">*</span> c<br></code></pre></td></tr></table></figure><p>以上三种方式效果一致</p><ul><li>abc</li></ul><ol start="2"><li>有序列表</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正常<br><span class="hljs-bullet">1.</span> abc<br><span class="hljs-bullet">2.</span> bcd<br><span class="hljs-bullet">3.</span> cde<br>错序<br><span class="hljs-bullet">2.</span> fgh<br><span class="hljs-bullet">4.</span> ghi<br><span class="hljs-bullet">5.</span> hij<br></code></pre></td></tr></table></figure><ol start="3"><li>嵌套列表 </li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//无序列表嵌套<br><span class="hljs-bullet">+</span> 123<br><span class="hljs-bullet">    +</span> abc<br><span class="hljs-bullet">    +</span> bcd<br><span class="hljs-bullet">    +</span> cde<br><span class="hljs-bullet">+</span> 465<br><span class="hljs-bullet">+</span> 789<br>//有序列表嵌套<br><span class="hljs-bullet">1.</span> abcd<br><span class="hljs-bullet">    1.</span> abcde<br><span class="hljs-bullet">    2.</span> abcde<br><span class="hljs-bullet">    3.</span> abcde<br><span class="hljs-bullet">2.</span> bcde<br><span class="hljs-bullet">3.</span> cdef<br></code></pre></td></tr></table></figure><ul><li>123<ul><li>abc</li><li>bcd</li><li>cde</li></ul></li><li>465</li><li>789</li></ul><ol><li>abcd<ol><li>abcde</li><li>abcde</li><li>abcde</li></ol></li><li>bcde</li><li>cdef</li></ol><h3 id="四、引用说明区块"><a href="#四、引用说明区块" class="headerlink" title="四、引用说明区块"></a>四、引用说明区块</h3><blockquote><p>对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。</p></blockquote><ol><li>正常形式</li></ol><blockquote><p>引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</p></blockquote><ol start="2"><li>嵌套区块</li></ol><blockquote><p>这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> 一级引用</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt; 二级引用</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; 三级引用</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;&gt; 四级引用</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt; 五级引用</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt; 六级引用</span><br></code></pre></td></tr></table></figure><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p><blockquote><p>四级引用</p><blockquote><p>五级引用</p><blockquote><p>六级引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h3 id="五、代码块"><a href="#五、代码块" class="headerlink" title="五、代码块"></a>五、代码块</h3><blockquote><p>在发布一些技术文章会涉及展示代码的问题，这时候代码块就显得尤为重要。</p></blockquote><ol><li>少量代码，单行使用，直接用`包裹起来就行了</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`少量代码，单行使用`</span><br></code></pre></td></tr></table></figure><p><code>少量代码，单行使用</code></p><ol start="2"><li>大量代码，需要多行使用，用```包裹起来</li></ol><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">``` <br>    大量代码，需要多行使用<br>    大量代码，需要多行使用<br>    大量代码，需要多行使用<br>``` <br></code></pre></td></tr></table></figure><h3 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h3><ol><li>行内式</li></ol><blockquote><p>链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[哔哩哔哩](https:<span class="hljs-regexp">//</span>www.bilibili.com/ <span class="hljs-string">&quot;哔哩哔哩( ゜- ゜)つロ 乾杯~&quot;</span>)，是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。<br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/" title="哔哩哔哩( ゜- ゜)つロ 乾杯~">哔哩哔哩</a>，是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。</p><ol start="2"><li>参数式</li></ol><blockquote><p>链接的文字放在[]中，链接地址放在随后的:后，链接地址后面空一格，然后用引号引起来</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-symbol">哔哩哔哩</span>]: <span class="hljs-link">https://www.bilibili.com/ &quot;哔哩哔哩( ゜- ゜)つロ 乾杯~&quot;</span><br>[哔哩哔哩]是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。<br>其他写法<br>[<span class="hljs-symbol">哔哩哔哩</span>]: <span class="hljs-link">https://www.bilibili.com/ &#x27;哔哩哔哩( ゜- ゜)つロ 乾杯~&#x27;</span><br>[<span class="hljs-symbol">哔哩哔哩</span>]: <span class="hljs-link">https://www.bilibili.com/ (哔哩哔哩( ゜- ゜)つロ 乾杯~)</span><br>[<span class="hljs-symbol">哔哩哔哩</span>]: <span class="hljs-link">&lt;https://www.bilibili.com/&gt; &quot;哔哩哔哩( ゜- ゜)つロ 乾杯~&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/" title="哔哩哔哩( ゜- ゜)つロ 乾杯~">哔哩哔哩</a>是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。</p><h3 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h3><ol><li>行内式</li></ol><blockquote><p>和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![dog.png](https:<span class="hljs-regexp">//</span>pic2.zhimg.com<span class="hljs-regexp">/80/</span>v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png <span class="hljs-string">&quot;小狗&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png" alt="dog.png" title="小狗"></p><ol start="2"><li>参数式</li></ol><blockquote><p>图片的文字放在[]中，图片地址放在随后的:后，title属性（图片地址后面空一格，然后用引号引起来）,注意引用图片的时候在[]前要加上!</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">[dog.png]: https:<span class="hljs-regexp">//</span>pic2.zhimg.com<span class="hljs-regexp">/80/</span>v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png <span class="hljs-string">&quot;小狗&quot;</span><br>![dog.png]<br>[dog.png]: https:<span class="hljs-regexp">//</span>pic2.zhimg.com<span class="hljs-regexp">/80/</span>v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png <span class="hljs-string">&#x27;小狗&#x27;</span><br>[dog.png]: https:<span class="hljs-regexp">//</span>pic2.zhimg.com<span class="hljs-regexp">/80/</span>v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png (小狗)<br>[dog.png]: &lt;https:<span class="hljs-regexp">//</span>pic2.zhimg.com<span class="hljs-regexp">/80/</span>v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png&gt; <span class="hljs-string">&quot;小狗&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png" alt="dog.png" title="小狗"></p><h3 id="八、分割线"><a href="#八、分割线" class="headerlink" title="八、分割线"></a>八、分割线</h3><blockquote><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">---<br><span class="hljs-bullet">- </span>- -<br>------<br>**<span class="hljs-strong">*</span><br><span class="hljs-strong">*</span> * <span class="hljs-strong">*</span><br><span class="hljs-strong">*</span>****<span class="hljs-strong">*</span><br><span class="hljs-strong">___</span><br><span class="hljs-strong">_ _ _</span><br><span class="hljs-strong">______</span><br></code></pre></td></tr></table></figure><p>以上代码的效果一致：</p><hr><h3 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h3><ol><li>强调字体</li></ol><blockquote><p>一个星号或者是一个下划线包起来，会转换为<em>倾斜</em>，如果是2个，会转换为<strong>加粗</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*Markdown*</span>    <br><span class="hljs-strong">**Markdown**</span><br><span class="hljs-emphasis">_Markdown_</span>   <br><span class="hljs-strong">__Markdown__</span><br></code></pre></td></tr></table></figure><p><em>Markdown</em><br><strong>Markdown</strong><br><em>Markdown</em><br><strong>Markdown</strong></p><blockquote><p>不知为何我这里不明显…</p></blockquote><ol start="2"><li>转义</li></ol><blockquote><p>基本上和js转义一样,\加需要转义的字符</p></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\\</span><br><span class="hljs-string">\*</span><br><span class="hljs-string">\+</span><br><span class="hljs-string">\-</span><br><span class="hljs-string">\`</span><br><span class="hljs-string">\_</span><br></code></pre></td></tr></table></figure><ol start="3"><li>删除线</li></ol><blockquote><p>用~~把需要显示删除线的字符包裹起来</p></blockquote><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml">~~删除~~<br></code></pre></td></tr></table></figure><p><del>删除</del></p><h3 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">栗子一<br>|<span class="hljs-string">123</span>|<span class="hljs-string">234</span>|<span class="hljs-string">345</span>|<br>|<span class="hljs-string">:-</span>|<span class="hljs-string">:-:</span>|<span class="hljs-string">-:</span>|<br>|<span class="hljs-string">abc</span>|<span class="hljs-string">bcd</span>|<span class="hljs-string">cde</span>|<br>|<span class="hljs-string">abc</span>|<span class="hljs-string">bcd</span>|<span class="hljs-string">cde</span>|<br>|<span class="hljs-string">abc</span>|<span class="hljs-string">bcd</span>|<span class="hljs-string">cde</span>|<br><br>栗子二<br>|<span class="hljs-string">123</span>|<span class="hljs-string">234</span>|<span class="hljs-string">345</span>|<br>|<span class="hljs-string">:---</span>|<span class="hljs-string">:---:</span>|<span class="hljs-string">---:</span>|<br>|<span class="hljs-string">abc</span>|<span class="hljs-string">bcd</span>|<span class="hljs-string">cde</span>|<br>|<span class="hljs-string">abc</span>|<span class="hljs-string">bcd</span>|<span class="hljs-string">cde</span>|<br>|<span class="hljs-string">abc</span>|<span class="hljs-string">bcd</span>|<span class="hljs-string">cde</span>|<br><br>栗子三<br>123|<span class="hljs-string">234</span>|345<br>:-|<span class="hljs-string">:-:</span>|<span class="hljs-string">-:</span><br><span class="hljs-string">abc</span>|<span class="hljs-string">bcd</span>|cde<br>abc|<span class="hljs-string">bcd</span>|cde<br>abc|<span class="hljs-string">bcd</span>|cde<br></code></pre></td></tr></table></figure><blockquote><p>上面三个例子的效果一样，由此可得：</p><ol><li>表格的格式不一定要对的非常起，但是为了良好的变成风格，尽量对齐是最好的</li><li>分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</li></ol></blockquote><table><thead><tr><th align="left">123</th><th align="center">234</th><th align="right">345</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table><blockquote><p>这篇文章的编写借鉴了很多网友的经验，同时鉴赏我自己的总结，跟大家一起分享了。<br>即使遇到了不幸的灾难，已经开始了的事情决不放弃!</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
