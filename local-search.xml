<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>享元模式</title>
    <link href="/911124696.html"/>
    <url>/911124696.html</url>
    
    <content type="html"><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 Circle 对象。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>运用共享技术有效地支持大量细粒度的对象。</p><p><strong>主要解决：</strong>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p><p><strong>何时使用：</strong> </p><ul><li>系统中有大量对象。 </li><li>这些对象消耗大量内存。 </li><li>这些对象的状态大部分可以外部化。 </li><li>这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 </li><li>系统不依赖于这些对象身份，这些对象是不可分辨的。</li></ul><p><strong>如何解决：</strong>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p><p><strong>关键代码：</strong>用 HashMap 存储这些对象。</p><p><strong>应用实例：</strong> </p><ul><li>JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。</li><li>数据库的数据池。</li></ul><p><strong>优点：</strong>大大减少对象的创建，降低系统的内存，使效率提高。</p><p><strong>缺点：</strong>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p><p><strong>使用场景：</strong> </p><ul><li>系统有大量相似对象。 </li><li>需要缓冲池的场景。</li></ul><p><strong>注意事项：</strong> </p><ul><li>注意划分外部状态和内部状态，否则可能会引起线程安全问题。 </li><li>这些类必须有一个工厂对象加以控制。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类 Circle。下一步是定义工厂类 ShapeFactory。</p><p>ShapeFactory 有一个 Circle 的 HashMap，其中键名为 Circle 对象的颜色。无论何时接收到请求，都会创建一个特定颜色的圆。ShapeFactory 检查它的 HashMap 中的 circle 对象，如果找到 Circle 对象，则返回该对象，否则将创建一个存储在 hashmap 中以备后续使用的新对象，并把该对象返回到客户端。</p><p>FlyWeightPatternDemo 类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（red / green / blue/ black / white），以便获取它所需对象的颜色。</p><p><img src="/img/posts/java/design_patterns/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.jpg" title="享元模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> String color;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> y;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> radius;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Circle</span><span class="hljs-params">(String color)</span></span>&#123;<br>      <span class="hljs-keyword">this</span>.color = color;     <br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setX</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.x = x;<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setY</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.y = y;<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRadius</span><span class="hljs-params">(<span class="hljs-keyword">int</span> radius)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.radius = radius;<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Circle: Draw() [Color : &quot;</span> + color <br>         +<span class="hljs-string">&quot;, x : &quot;</span> + x +<span class="hljs-string">&quot;, y :&quot;</span> + y +<span class="hljs-string">&quot;, radius :&quot;</span> + radius);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeFactory</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> HashMap&lt;String, Shape&gt; circleMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Shape <span class="hljs-title">getCircle</span><span class="hljs-params">(String color)</span> </span>&#123;<br>      Circle circle = (Circle)circleMap.get(color);<br> <br>      <span class="hljs-keyword">if</span>(circle == <span class="hljs-keyword">null</span>) &#123;<br>         circle = <span class="hljs-keyword">new</span> Circle(color);<br>         circleMap.put(color, circle);<br>         System.out.println(<span class="hljs-string">&quot;Creating circle of color : &quot;</span> + color);<br>      &#125;<br>      <span class="hljs-keyword">return</span> circle;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>使用该工厂，通过传递颜色信息来获取实体类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyweightPatternDemo</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String colors[] = <br>      &#123; <span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>, <span class="hljs-string">&quot;White&quot;</span>, <span class="hljs-string">&quot;Black&quot;</span> &#125;;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> <br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i) &#123;<br>         Circle circle = <br>            (Circle)ShapeFactory.getCircle(getRandomColor());<br>         circle.setX(getRandomX());<br>         circle.setY(getRandomY());<br>         circle.setRadius(<span class="hljs-number">100</span>);<br>         circle.draw();<br>      &#125;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getRandomColor</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> colors[(<span class="hljs-keyword">int</span>)(Math.random()*colors.length)];<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRandomX</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">100</span> );<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRandomY</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">100</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>执行程序，输出结果：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs groovy">Creating circle of <span class="hljs-attr">color :</span> Black<br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Black, <span class="hljs-attr">x :</span> <span class="hljs-number">36</span>, <span class="hljs-attr">y :</span><span class="hljs-number">71</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br>Creating circle of <span class="hljs-attr">color :</span> Green<br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Green, <span class="hljs-attr">x :</span> <span class="hljs-number">27</span>, <span class="hljs-attr">y :</span><span class="hljs-number">27</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br>Creating circle of <span class="hljs-attr">color :</span> White<br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> White, <span class="hljs-attr">x :</span> <span class="hljs-number">64</span>, <span class="hljs-attr">y :</span><span class="hljs-number">10</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br>Creating circle of <span class="hljs-attr">color :</span> Red<br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Red, <span class="hljs-attr">x :</span> <span class="hljs-number">15</span>, <span class="hljs-attr">y :</span><span class="hljs-number">44</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Green, <span class="hljs-attr">x :</span> <span class="hljs-number">19</span>, <span class="hljs-attr">y :</span><span class="hljs-number">10</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Green, <span class="hljs-attr">x :</span> <span class="hljs-number">94</span>, <span class="hljs-attr">y :</span><span class="hljs-number">32</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> White, <span class="hljs-attr">x :</span> <span class="hljs-number">69</span>, <span class="hljs-attr">y :</span><span class="hljs-number">98</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br>Creating circle of <span class="hljs-attr">color :</span> Blue<br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Blue, <span class="hljs-attr">x :</span> <span class="hljs-number">13</span>, <span class="hljs-attr">y :</span><span class="hljs-number">4</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Green, <span class="hljs-attr">x :</span> <span class="hljs-number">21</span>, <span class="hljs-attr">y :</span><span class="hljs-number">21</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Blue, <span class="hljs-attr">x :</span> <span class="hljs-number">55</span>, <span class="hljs-attr">y :</span><span class="hljs-number">86</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> White, <span class="hljs-attr">x :</span> <span class="hljs-number">90</span>, <span class="hljs-attr">y :</span><span class="hljs-number">70</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Green, <span class="hljs-attr">x :</span> <span class="hljs-number">78</span>, <span class="hljs-attr">y :</span><span class="hljs-number">3</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Green, <span class="hljs-attr">x :</span> <span class="hljs-number">64</span>, <span class="hljs-attr">y :</span><span class="hljs-number">89</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Blue, <span class="hljs-attr">x :</span> <span class="hljs-number">3</span>, <span class="hljs-attr">y :</span><span class="hljs-number">91</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Blue, <span class="hljs-attr">x :</span> <span class="hljs-number">62</span>, <span class="hljs-attr">y :</span><span class="hljs-number">82</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Green, <span class="hljs-attr">x :</span> <span class="hljs-number">97</span>, <span class="hljs-attr">y :</span><span class="hljs-number">61</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Green, <span class="hljs-attr">x :</span> <span class="hljs-number">86</span>, <span class="hljs-attr">y :</span><span class="hljs-number">12</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Green, <span class="hljs-attr">x :</span> <span class="hljs-number">38</span>, <span class="hljs-attr">y :</span><span class="hljs-number">93</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Red, <span class="hljs-attr">x :</span> <span class="hljs-number">76</span>, <span class="hljs-attr">y :</span><span class="hljs-number">82</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br><span class="hljs-attr">Circle:</span> Draw() [<span class="hljs-attr">Color :</span> Blue, <span class="hljs-attr">x :</span> <span class="hljs-number">95</span>, <span class="hljs-attr">y :</span><span class="hljs-number">82</span>, <span class="hljs-attr">radius :</span><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>外观模式</title>
    <link href="/911124695.html"/>
    <url>/911124695.html</url>
    
    <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p><p>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p><strong>主要解决：</strong>降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。</p><p><strong>何时使用：</strong> </p><ul><li>客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。 </li><li>定义系统的入口。</li></ul><p><strong>如何解决：</strong>客户端不与系统耦合，外观类与系统耦合。</p><p><strong>关键代码：</strong>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p><p><strong>应用实例：</strong> </p><ul><li>去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 </li><li>JAVA 的三层开发模式。</li></ul><p><strong>优点：</strong> </p><ul><li>减少系统相互依赖。 </li><li>提高灵活性。 </li><li>提高了安全性。</li></ul><p><strong>缺点：</strong>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p><p><strong>使用场景：</strong> </p><ul><li>为复杂的模块或子系统提供外界访问的模块。 </li><li>子系统相对独立。 </li><li>预防低水平人员带来的风险。</li></ul><p><strong>注意事项：</strong>在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类。下一步是定义一个外观类 ShapeMaker。</p><p>ShapeMaker 类使用实体类来代表用户对这些类的调用。FacadePatternDemo 类使用 ShapeMaker 类来显示结果。</p><p><img src="/img/posts/java/design_patterns/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.jpg" title="外观模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Rectangle::draw()&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Square::draw()&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Circle::draw()&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建一个外观类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeMaker</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> Shape circle;<br>   <span class="hljs-keyword">private</span> Shape rectangle;<br>   <span class="hljs-keyword">private</span> Shape square;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ShapeMaker</span><span class="hljs-params">()</span> </span>&#123;<br>      circle = <span class="hljs-keyword">new</span> Circle();<br>      rectangle = <span class="hljs-keyword">new</span> Rectangle();<br>      square = <span class="hljs-keyword">new</span> Square();<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">()</span></span>&#123;<br>      circle.draw();<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">()</span></span>&#123;<br>      rectangle.draw();<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawSquare</span><span class="hljs-params">()</span></span>&#123;<br>      square.draw();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>使用该外观类画出各种类型的形状。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FacadePatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      ShapeMaker shapeMaker = <span class="hljs-keyword">new</span> ShapeMaker();<br> <br>      shapeMaker.drawCircle();<br>      shapeMaker.drawRectangle();<br>      shapeMaker.drawSquare();      <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>执行程序，输出结果：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">Circle</span>::<span class="hljs-function"><span class="hljs-title">draw</span>()</span><br><span class="hljs-variable">Rectangle</span>::<span class="hljs-function"><span class="hljs-title">draw</span>()</span><br><span class="hljs-variable">Square</span>::<span class="hljs-function"><span class="hljs-title">draw</span>()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装饰器模式</title>
    <link href="/911124694.html"/>
    <url>/911124694.html</url>
    
    <content type="html"><![CDATA[<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><p>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p><p><strong>主要解决：</strong>一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p><p><strong>何时使用：</strong>在不想增加很多子类的情况下扩展类。</p><p><strong>如何解决：</strong>将具体功能职责划分，同时继承装饰者模式。</p><p><strong>关键代码：</strong> </p><ul><li>Component 类充当抽象角色，不应该具体实现。 </li><li>修饰类引用和继承 Component 类，具体扩展类重写父类方法。</li></ul><p><strong>应用实例：</strong> </p><ul><li>孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。 </li><li>不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</li></ul><p><strong>优点：</strong>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p><p><strong>缺点：</strong>多层装饰比较复杂。</p><p><strong>使用场景：</strong> </p><ul><li>扩展一个类的功能。 </li><li>动态增加功能，动态撤销。</li></ul><p><strong>注意事项：</strong>可代替继承。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类。然后我们创建一个实现了 Shape 接口的抽象装饰类 ShapeDecorator，并把 Shape 对象作为它的实例变量。</p><p>RedShapeDecorator 是实现了 ShapeDecorator 的实体类。</p><p>DecoratorPatternDemo 类使用 RedShapeDecorator 来装饰 Shape 对象。</p><p><img src="/img/posts/java/design_patterns/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg" title="装饰器模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Shape: Rectangle&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Shape: Circle&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建实现了 Shape 接口的抽象装饰类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-keyword">protected</span> Shape decoratedShape;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ShapeDecorator</span><span class="hljs-params">(Shape decoratedShape)</span></span>&#123;<br>      <span class="hljs-keyword">this</span>.decoratedShape = decoratedShape;<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>&#123;<br>      decoratedShape.draw();<br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>创建扩展了 ShapeDecorator 类的实体装饰类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedShapeDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ShapeDecorator</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RedShapeDecorator</span><span class="hljs-params">(Shape decoratedShape)</span> </span>&#123;<br>      <span class="hljs-keyword">super</span>(decoratedShape);     <br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      decoratedShape.draw();         <br>      setRedBorder(decoratedShape);<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRedBorder</span><span class="hljs-params">(Shape decoratedShape)</span></span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Border Color: Red&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>使用 RedShapeDecorator 来装饰 Shape 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DecoratorPatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      Shape circle = <span class="hljs-keyword">new</span> Circle();<br>      ShapeDecorator redCircle = <span class="hljs-keyword">new</span> RedShapeDecorator(<span class="hljs-keyword">new</span> Circle());<br>      ShapeDecorator redRectangle = <span class="hljs-keyword">new</span> RedShapeDecorator(<span class="hljs-keyword">new</span> Rectangle());<br>      <span class="hljs-comment">//Shape redCircle = new RedShapeDecorator(new Circle());</span><br>      <span class="hljs-comment">//Shape redRectangle = new RedShapeDecorator(new Rectangle());</span><br>      System.out.println(<span class="hljs-string">&quot;Circle with normal border&quot;</span>);<br>      circle.draw();<br> <br>      System.out.println(<span class="hljs-string">&quot;\nCircle of red border&quot;</span>);<br>      redCircle.draw();<br> <br>      System.out.println(<span class="hljs-string">&quot;\nRectangle of red border&quot;</span>);<br>      redRectangle.draw();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤 6"></a>步骤 6</h3><p>执行程序，输出结果：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Circle with <span class="hljs-keyword">normal </span><span class="hljs-keyword">border</span><br><span class="hljs-keyword">Shape: </span>Circle<br><br>Circle of red <span class="hljs-keyword">border</span><br><span class="hljs-keyword">Shape: </span>Circle<br><span class="hljs-keyword">Border </span>Color: Red<br><br>Rectangle of red <span class="hljs-keyword">border</span><br><span class="hljs-keyword">Shape: </span>Rectangle<br><span class="hljs-keyword">Border </span>Color: Red<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合模式</title>
    <link href="/911124693.html"/>
    <url>/911124693.html</url>
    
    <content type="html"><![CDATA[<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p><p>我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><p><strong>主要解决：</strong>它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><p><strong>何时使用：</strong> </p><ul><li>您想表示对象的部分-整体层次结构（树形结构）。 </li><li>您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li></ul><p><strong>如何解决：</strong>树枝和叶子实现统一接口，树枝内部组合该接口。</p><p><strong>关键代码：</strong>树枝内部组合该接口，并且含有内部属性 List，里面放 Component。</p><p><strong>应用实例：</strong> </p><ul><li>算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。 </li><li>在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。</li></ul><p><strong>优点：</strong> </p><ul><li>高层模块调用简单。 </li><li>节点自由增加。</li></ul><p><strong>缺点：</strong>在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><p><strong>使用场景：</strong>部分、整体场景，如树形菜单，文件、文件夹的管理。</p><p><strong>注意事项：</strong>定义时为具体类。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们有一个类 Employee，该类被当作组合模型类。CompositePatternDemo 类使用 Employee 类来添加部门层次结构，并打印所有员工。</p><p><img src="/img/posts/java/design_patterns/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.jpg" title="组合模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建 Employee 类，该类带有 Employee 对象的列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> String dept;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> salary;<br>   <span class="hljs-keyword">private</span> List&lt;Employee&gt; subordinates;<br> <br>   <span class="hljs-comment">//构造函数</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(String name,String dept, <span class="hljs-keyword">int</span> sal)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.name = name;<br>      <span class="hljs-keyword">this</span>.dept = dept;<br>      <span class="hljs-keyword">this</span>.salary = sal;<br>      subordinates = <span class="hljs-keyword">new</span> ArrayList&lt;Employee&gt;();<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Employee e)</span> </span>&#123;<br>      subordinates.add(e);<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Employee e)</span> </span>&#123;<br>      subordinates.remove(e);<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getSubordinates</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-keyword">return</span> subordinates;<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Employee :[ Name : &quot;</span>+ name <br>      +<span class="hljs-string">&quot;, dept : &quot;</span>+ dept + <span class="hljs-string">&quot;, salary :&quot;</span><br>      + salary+<span class="hljs-string">&quot; ]&quot;</span>);<br>   &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>使用 Employee 类来创建和打印员工的层次结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompositePatternDemo</span> </span>&#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>          Employee CEO = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;CEO&quot;</span>, <span class="hljs-number">30000</span>);<br>     <br>          Employee headSales = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;Robert&quot;</span>,<span class="hljs-string">&quot;Head Sales&quot;</span>, <span class="hljs-number">20000</span>);<br>     <br>          Employee headMarketing = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;Michel&quot;</span>,<span class="hljs-string">&quot;Head Marketing&quot;</span>, <span class="hljs-number">20000</span>);<br>     <br>          Employee clerk1 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;Laura&quot;</span>,<span class="hljs-string">&quot;Marketing&quot;</span>, <span class="hljs-number">10000</span>);<br>          Employee clerk2 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Marketing&quot;</span>, <span class="hljs-number">10000</span>);<br>     <br>          Employee salesExecutive1 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;Richard&quot;</span>,<span class="hljs-string">&quot;Sales&quot;</span>, <span class="hljs-number">10000</span>);<br>          Employee salesExecutive2 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;Rob&quot;</span>,<span class="hljs-string">&quot;Sales&quot;</span>, <span class="hljs-number">10000</span>);<br>     <br>          CEO.add(headSales);<br>          CEO.add(headMarketing);<br>     <br>          headSales.add(salesExecutive1);<br>          headSales.add(salesExecutive2);<br>     <br>          headMarketing.add(clerk1);<br>          headMarketing.add(clerk2);<br>     <br>          <span class="hljs-comment">//打印该组织的所有员工</span><br>          System.out.println(CEO); <br>          <span class="hljs-keyword">for</span> (Employee headEmployee : CEO.getSubordinates()) &#123;<br>             System.out.println(headEmployee);<br>             <span class="hljs-keyword">for</span> (Employee employee : headEmployee.getSubordinates()) &#123;<br>                System.out.println(employee);<br>             &#125;<br>          &#125;        <br>       &#125;<br>    &#125;<br>```    <br><br>### 步骤 3<br><br>执行程序，输出结果为：<br><br></code></pre></td></tr></table></figure><pre><code>Employee :[ Name : John, dept : CEO, salary :30000 ]Employee :[ Name : Robert, dept : Head Sales, salary :20000 ]Employee :[ Name : Richard, dept : Sales, salary :10000 ]Employee :[ Name : Rob, dept : Sales, salary :10000 ]Employee :[ Name : Michel, dept : Head Marketing, salary :20000 ]Employee :[ Name : Laura, dept : Marketing, salary :10000 ]Employee :[ Name : Bob, dept : Marketing, salary :10000 ]</code></pre><p>```</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>过滤器模式</title>
    <link href="/911124692.html"/>
    <url>/911124692.html</url>
    
    <content type="html"><![CDATA[<h1 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h1><p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 Person 对象、Criteria 接口和实现了该接口的实体类，来过滤 Person 对象的列表。CriteriaPatternDemo 类使用 Criteria 对象，基于各种标准和它们的结合来过滤 Person 对象的列表。</p><p><img src="/img/posts/java/design_patterns/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg" title="过滤器模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个类，在该类上应用标准。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> String gender;<br>   <span class="hljs-keyword">private</span> String maritalStatus;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name,String gender,String maritalStatus)</span></span>&#123;<br>      <span class="hljs-keyword">this</span>.name = name;<br>      <span class="hljs-keyword">this</span>.gender = gender;<br>      <span class="hljs-keyword">this</span>.maritalStatus = maritalStatus;    <br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> name;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> gender;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMaritalStatus</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> maritalStatus;<br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>为标准（Criteria）创建一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Criteria</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title">meetCriteria</span><span class="hljs-params">(List&lt;Person&gt; persons)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建实现了 Criteria 接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CriteriaMale</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Criteria</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title">meetCriteria</span><span class="hljs-params">(List&lt;Person&gt; persons)</span> </span>&#123;<br>      List&lt;Person&gt; malePersons = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;(); <br>      <span class="hljs-keyword">for</span> (Person person : persons) &#123;<br>         <span class="hljs-keyword">if</span>(person.getGender().equalsIgnoreCase(<span class="hljs-string">&quot;MALE&quot;</span>))&#123;<br>            malePersons.add(person);<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> malePersons;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CriteriaFemale</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Criteria</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title">meetCriteria</span><span class="hljs-params">(List&lt;Person&gt; persons)</span> </span>&#123;<br>      List&lt;Person&gt; femalePersons = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;(); <br>      <span class="hljs-keyword">for</span> (Person person : persons) &#123;<br>         <span class="hljs-keyword">if</span>(person.getGender().equalsIgnoreCase(<span class="hljs-string">&quot;FEMALE&quot;</span>))&#123;<br>            femalePersons.add(person);<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> femalePersons;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CriteriaSingle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Criteria</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title">meetCriteria</span><span class="hljs-params">(List&lt;Person&gt; persons)</span> </span>&#123;<br>      List&lt;Person&gt; singlePersons = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;(); <br>      <span class="hljs-keyword">for</span> (Person person : persons) &#123;<br>         <span class="hljs-keyword">if</span>(person.getMaritalStatus().equalsIgnoreCase(<span class="hljs-string">&quot;SINGLE&quot;</span>))&#123;<br>            singlePersons.add(person);<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> singlePersons;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AndCriteria</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Criteria</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> Criteria criteria;<br>   <span class="hljs-keyword">private</span> Criteria otherCriteria;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AndCriteria</span><span class="hljs-params">(Criteria criteria, Criteria otherCriteria)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.criteria = criteria;<br>      <span class="hljs-keyword">this</span>.otherCriteria = otherCriteria; <br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title">meetCriteria</span><span class="hljs-params">(List&lt;Person&gt; persons)</span> </span>&#123;<br>      List&lt;Person&gt; firstCriteriaPersons = criteria.meetCriteria(persons);     <br>      <span class="hljs-keyword">return</span> otherCriteria.meetCriteria(firstCriteriaPersons);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrCriteria</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Criteria</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> Criteria criteria;<br>   <span class="hljs-keyword">private</span> Criteria otherCriteria;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrCriteria</span><span class="hljs-params">(Criteria criteria, Criteria otherCriteria)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.criteria = criteria;<br>      <span class="hljs-keyword">this</span>.otherCriteria = otherCriteria; <br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title">meetCriteria</span><span class="hljs-params">(List&lt;Person&gt; persons)</span> </span>&#123;<br>      List&lt;Person&gt; firstCriteriaItems = criteria.meetCriteria(persons);<br>      List&lt;Person&gt; otherCriteriaItems = otherCriteria.meetCriteria(persons);<br> <br>      <span class="hljs-keyword">for</span> (Person person : otherCriteriaItems) &#123;<br>         <span class="hljs-keyword">if</span>(!firstCriteriaItems.contains(person))&#123;<br>           firstCriteriaItems.add(person);<br>         &#125;<br>      &#125;  <br>      <span class="hljs-keyword">return</span> firstCriteriaItems;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>使用不同的标准（Criteria）和它们的结合来过滤 Person 对象的列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList; <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CriteriaPatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      List&lt;Person&gt; persons = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;();<br> <br>      persons.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Robert&quot;</span>,<span class="hljs-string">&quot;Male&quot;</span>, <span class="hljs-string">&quot;Single&quot;</span>));<br>      persons.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;Male&quot;</span>, <span class="hljs-string">&quot;Married&quot;</span>));<br>      persons.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Laura&quot;</span>,<span class="hljs-string">&quot;Female&quot;</span>, <span class="hljs-string">&quot;Married&quot;</span>));<br>      persons.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Diana&quot;</span>,<span class="hljs-string">&quot;Female&quot;</span>, <span class="hljs-string">&quot;Single&quot;</span>));<br>      persons.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-string">&quot;Male&quot;</span>, <span class="hljs-string">&quot;Single&quot;</span>));<br>      persons.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bobby&quot;</span>,<span class="hljs-string">&quot;Male&quot;</span>, <span class="hljs-string">&quot;Single&quot;</span>));<br> <br>      Criteria male = <span class="hljs-keyword">new</span> CriteriaMale();<br>      Criteria female = <span class="hljs-keyword">new</span> CriteriaFemale();<br>      Criteria single = <span class="hljs-keyword">new</span> CriteriaSingle();<br>      Criteria singleMale = <span class="hljs-keyword">new</span> AndCriteria(single, male);<br>      Criteria singleOrFemale = <span class="hljs-keyword">new</span> OrCriteria(single, female);<br> <br>      System.out.println(<span class="hljs-string">&quot;Males: &quot;</span>);<br>      printPersons(male.meetCriteria(persons));<br> <br>      System.out.println(<span class="hljs-string">&quot;\nFemales: &quot;</span>);<br>      printPersons(female.meetCriteria(persons));<br> <br>      System.out.println(<span class="hljs-string">&quot;\nSingle Males: &quot;</span>);<br>      printPersons(singleMale.meetCriteria(persons));<br> <br>      System.out.println(<span class="hljs-string">&quot;\nSingle Or Females: &quot;</span>);<br>      printPersons(singleOrFemale.meetCriteria(persons));<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printPersons</span><span class="hljs-params">(List&lt;Person&gt; persons)</span></span>&#123;<br>      <span class="hljs-keyword">for</span> (Person person : persons) &#123;<br>         System.out.println(<span class="hljs-string">&quot;Person : [ Name : &quot;</span> + person.getName() <br>            +<span class="hljs-string">&quot;, Gender : &quot;</span> + person.getGender() <br>            +<span class="hljs-string">&quot;, Marital Status : &quot;</span> + person.getMaritalStatus()<br>            +<span class="hljs-string">&quot; ]&quot;</span>);<br>      &#125;<br>   &#125;      <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>执行程序，输出结果：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">Males:</span> <br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Robert, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Single ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> John, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Married ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Mike, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Single ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Bobby, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Single ]<br><br><span class="hljs-attr">Females:</span> <br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Laura, <span class="hljs-attr">Gender :</span> Female, Marital <span class="hljs-attr">Status :</span> Married ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Diana, <span class="hljs-attr">Gender :</span> Female, Marital <span class="hljs-attr">Status :</span> Single ]<br><br>Single <span class="hljs-attr">Males:</span> <br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Robert, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Single ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Mike, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Single ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Bobby, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Single ]<br><br>Single Or <span class="hljs-attr">Females:</span> <br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Robert, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Single ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Diana, <span class="hljs-attr">Gender :</span> Female, Marital <span class="hljs-attr">Status :</span> Single ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Mike, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Single ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Bobby, <span class="hljs-attr">Gender :</span> Male, Marital <span class="hljs-attr">Status :</span> Single ]<br><span class="hljs-attr">Person :</span> [ <span class="hljs-attr">Name :</span> Laura, <span class="hljs-attr">Gender :</span> Female, Marital <span class="hljs-attr">Status :</span> Married ]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桥接模式</title>
    <link href="/911124691.html"/>
    <url>/911124691.html</url>
    
    <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><p>我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>将抽象部分与实现部分分离，使它们都可以独立的变化。</p><p><strong>主要解决：</strong>在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</p><p><strong>何时使用：</strong>实现系统可能有多个角度分类，每一种角度都可能变化。</p><p><strong>如何解决：</strong>把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。</p><p><strong>关键代码：</strong>抽象类依赖实现类。</p><p><strong>应用实例：</strong> </p><ul><li>猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 </li><li>墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</li></ul><p><strong>优点：</strong> </p><ul><li>抽象和实现的分离。 </li><li>优秀的扩展能力。 </li><li>实现细节对客户透明。</li></ul><p><strong>缺点：</strong>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p><p><strong>使用场景：</strong> </p><ul><li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 </li><li>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 </li><li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li></ul><p><strong>注意事项：</strong>对于两个独立变化的维度，使用桥接模式再适合不过了。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们有一个作为桥接实现的 DrawAPI 接口和实现了 DrawAPI 接口的实体类 RedCircle、GreenCircle。Shape 是一个抽象类，将使用 DrawAPI 的对象。BridgePatternDemo 类使用 Shape 类来画出不同颜色的圆。</p><p><img src="/img/posts/java/design_patterns/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.jpg" title="桥接模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建桥接实现接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DrawAPI</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> radius, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现了 DrawAPI 接口的实体桥接实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedCircle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DrawAPI</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> radius, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Drawing Circle[ color: red, radius: &quot;</span><br>         + radius + <span class="hljs-string">&quot;, x: &quot;</span> + x + <span class="hljs-string">&quot;, &quot;</span> + y + <span class="hljs-string">&quot;]&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreenCircle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DrawAPI</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> radius, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Drawing Circle[ color: green, radius: &quot;</span><br>         + radius + <span class="hljs-string">&quot;, x: &quot;</span> + x + <span class="hljs-string">&quot;, &quot;</span> + y + <span class="hljs-string">&quot;]&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>使用 DrawAPI 接口创建抽象类 Shape。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-keyword">protected</span> DrawAPI drawAPI;<br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">Shape</span><span class="hljs-params">(DrawAPI drawAPI)</span></span>&#123;<br>      <span class="hljs-keyword">this</span>.drawAPI = drawAPI;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>创建实现了 Shape 抽象类的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x, y, radius;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Circle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;<br>      <span class="hljs-keyword">super</span>(drawAPI);<br>      <span class="hljs-keyword">this</span>.x = x;  <br>      <span class="hljs-keyword">this</span>.y = y;  <br>      <span class="hljs-keyword">this</span>.radius = radius;<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      drawAPI.drawCircle(radius,x,y);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>使用 Shape 和 DrawAPI 类画出不同颜色的圆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BridgePatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      Shape redCircle = <span class="hljs-keyword">new</span> Circle(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-keyword">new</span> RedCircle());<br>      Shape greenCircle = <span class="hljs-keyword">new</span> Circle(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-keyword">new</span> GreenCircle());<br> <br>      redCircle.draw();<br>      greenCircle.draw();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤 6"></a>步骤 6</h3><p>执行程序，输出结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Drawing</span> Circle[ color: red, radius: <span class="hljs-number">10</span>, x: <span class="hljs-number">100</span>, <span class="hljs-number">100</span>]<br><span class="hljs-attribute">Drawing</span> Circle[ color: green, radius: <span class="hljs-number">10</span>, x: <span class="hljs-number">100</span>, <span class="hljs-number">100</span>]<br></code></pre></td></tr></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://www.runoob.com/w3cnote/bridge-pattern2.html">桥接模式</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适配器模式</title>
    <link href="/911124690.html"/>
    <url>/911124690.html</url>
    
    <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p><p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p><p>我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><strong>主要解决：</strong>主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</p><p><strong>何时使用：</strong> </p><ul><li>系统需要使用现有的类，而此类的接口不符合系统的需要。 </li><li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 </li><li>通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）</li></ul><p><strong>如何解决：</strong>继承或依赖（推荐）。</p><p><strong>关键代码：</strong>适配器继承或依赖已有的对象，实现想要的目标接口。</p><p><strong>应用实例：</strong> </p><ul><li>美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。 </li><li>JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。 </li><li>在 LINUX 上运行 WINDOWS 程序。 </li><li>JAVA 中的 jdbc。</li></ul><p><strong>优点：</strong> </p><ul><li>可以让任何两个没有关联的类一起运行。 </li><li>提高了类的复用。 </li><li>增加了类的透明度。 </li><li>灵活性好。</li></ul><p><strong>缺点：</strong> </p><ul><li>过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 </li><li>由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</li></ul><p><strong>使用场景：</strong>有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。</p><p><strong>注意事项：</strong>适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们有一个 MediaPlayer 接口和一个实现了 MediaPlayer 接口的实体类 AudioPlayer。默认情况下，AudioPlayer 可以播放 mp3 格式的音频文件。</p><p>我们还有另一个接口 AdvancedMediaPlayer 和实现了 AdvancedMediaPlayer 接口的实体类。该类可以播放 vlc 和 mp4 格式的文件。</p><p>我们想要让 AudioPlayer 播放其他格式的音频文件。为了实现这个功能，我们需要创建一个实现了 MediaPlayer 接口的适配器类 MediaAdapter，并使用 AdvancedMediaPlayer 对象来播放所需的格式。</p><p>AudioPlayer 使用适配器类 MediaAdapter 传递所需的音频类型，不需要知道能播放所需格式音频的实际类。AdapterPatternDemo 类使用 AudioPlayer 类来播放各种格式。</p><p><img src="/img/posts/java/design_patterns/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg" title="适配器模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>为媒体播放器和更高级的媒体播放器创建接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MediaPlayer</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(String audioType, String fileName)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AdvancedMediaPlayer</span> </span>&#123; <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playVlc</span><span class="hljs-params">(String fileName)</span></span>;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playMp4</span><span class="hljs-params">(String fileName)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现了 AdvancedMediaPlayer 接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VlcPlayer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AdvancedMediaPlayer</span></span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playVlc</span><span class="hljs-params">(String fileName)</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Playing vlc file. Name: &quot;</span>+ fileName);      <br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playMp4</span><span class="hljs-params">(String fileName)</span> </span>&#123;<br>      <span class="hljs-comment">//什么也不做</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mp4Player</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AdvancedMediaPlayer</span></span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playVlc</span><span class="hljs-params">(String fileName)</span> </span>&#123;<br>      <span class="hljs-comment">//什么也不做</span><br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playMp4</span><span class="hljs-params">(String fileName)</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Playing mp4 file. Name: &quot;</span>+ fileName);      <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建实现了 MediaPlayer 接口的适配器类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MediaAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MediaPlayer</span> </span>&#123;<br> <br>   AdvancedMediaPlayer advancedMusicPlayer;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MediaAdapter</span><span class="hljs-params">(String audioType)</span></span>&#123;<br>      <span class="hljs-keyword">if</span>(audioType.equalsIgnoreCase(<span class="hljs-string">&quot;vlc&quot;</span>) )&#123;<br>         advancedMusicPlayer = <span class="hljs-keyword">new</span> VlcPlayer();       <br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (audioType.equalsIgnoreCase(<span class="hljs-string">&quot;mp4&quot;</span>))&#123;<br>         advancedMusicPlayer = <span class="hljs-keyword">new</span> Mp4Player();<br>      &#125;  <br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(String audioType, String fileName)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span>(audioType.equalsIgnoreCase(<span class="hljs-string">&quot;vlc&quot;</span>))&#123;<br>         advancedMusicPlayer.playVlc(fileName);<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(audioType.equalsIgnoreCase(<span class="hljs-string">&quot;mp4&quot;</span>))&#123;<br>         advancedMusicPlayer.playMp4(fileName);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>创建实现了 MediaPlayer 接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AudioPlayer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MediaPlayer</span> </span>&#123;<br>   MediaAdapter mediaAdapter; <br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(String audioType, String fileName)</span> </span>&#123;    <br> <br>      <span class="hljs-comment">//播放 mp3 音乐文件的内置支持</span><br>      <span class="hljs-keyword">if</span>(audioType.equalsIgnoreCase(<span class="hljs-string">&quot;mp3&quot;</span>))&#123;<br>         System.out.println(<span class="hljs-string">&quot;Playing mp3 file. Name: &quot;</span>+ fileName);         <br>      &#125; <br>      <span class="hljs-comment">//mediaAdapter 提供了播放其他文件格式的支持</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(audioType.equalsIgnoreCase(<span class="hljs-string">&quot;vlc&quot;</span>) <br>         || audioType.equalsIgnoreCase(<span class="hljs-string">&quot;mp4&quot;</span>))&#123;<br>         mediaAdapter = <span class="hljs-keyword">new</span> MediaAdapter(audioType);<br>         mediaAdapter.play(audioType, fileName);<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>         System.out.println(<span class="hljs-string">&quot;Invalid media. &quot;</span>+<br>            audioType + <span class="hljs-string">&quot; format not supported&quot;</span>);<br>      &#125;<br>   &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>使用 AudioPlayer 来播放不同类型的音频格式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdapterPatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      AudioPlayer audioPlayer = <span class="hljs-keyword">new</span> AudioPlayer();<br> <br>      audioPlayer.play(<span class="hljs-string">&quot;mp3&quot;</span>, <span class="hljs-string">&quot;beyond the horizon.mp3&quot;</span>);<br>      audioPlayer.play(<span class="hljs-string">&quot;mp4&quot;</span>, <span class="hljs-string">&quot;alone.mp4&quot;</span>);<br>      audioPlayer.play(<span class="hljs-string">&quot;vlc&quot;</span>, <span class="hljs-string">&quot;far far away.vlc&quot;</span>);<br>      audioPlayer.play(<span class="hljs-string">&quot;avi&quot;</span>, <span class="hljs-string">&quot;mind me.avi&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤 6"></a>步骤 6</h3><p>执行程序，输出结果：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi">Playing mp3 <span class="hljs-keyword">file</span>. <span class="hljs-keyword">Name</span>: beyond the horizon.mp3<br>Playing mp4 <span class="hljs-keyword">file</span>. <span class="hljs-keyword">Name</span>: alone.mp4<br>Playing vlc <span class="hljs-keyword">file</span>. <span class="hljs-keyword">Name</span>: <span class="hljs-keyword">far</span> <span class="hljs-keyword">far</span> away.vlc<br>Invalid media. avi format <span class="hljs-keyword">not</span> supported<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型模式</title>
    <link href="/911124689.html"/>
    <url>/911124689.html</url>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><strong>主要解决：</strong>在运行期建立和删除原型。</p><p><strong>何时使用：</strong> </p><ul><li>当一个系统应该独立于它的产品创建，构成和表示时。 </li><li>当要实例化的类是在运行时刻指定时，例如，通过动态装载。 </li><li>为了避免创建一个与产品类层次平行的工厂类层次时。 </li><li>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</li></ul><p><strong>如何解决：</strong>利用已有的一个原型对象，快速地生成和原型对象一样的实例。</p><p><strong>关键代码：</strong> </p><ul><li>实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 </li><li>原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些”易变类”拥有稳定的接口。</li></ul><p><strong>应用实例：</strong> </p><ul><li>细胞分裂。 </li><li>JAVA 中的 Object clone() 方法。</li></ul><p><strong>优点：</strong> </p><ul><li>性能提高。 </li><li>逃避构造函数的约束。</li></ul><p><strong>缺点：</strong> </p><ul><li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 </li><li>必须实现 Cloneable 接口。</li></ul><p><strong>使用场景：</strong> </p><ul><li>资源优化场景。 </li><li>类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 </li><li>性能和安全要求的场景。 </li><li>通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 </li><li>一个对象多个修改者的场景。 </li><li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。 </li><li>在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。</li></ul><p><strong>注意事项：</strong>与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个抽象类 Shape 和扩展了 Shape 类的实体类。下一步是定义类 ShapeCache，该类把 shape 对象存储在一个 Hashtable 中，并在请求的时候返回它们的克隆。</p><p>PrototypePatternDemo 类使用 ShapeCache 类来获取 Shape 对象。</p><p><img src="/img/posts/java/design_patterns/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.jpg" title="原型模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个实现了 Cloneable 接口的抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> String id;<br>   <span class="hljs-keyword">protected</span> String type;<br><br>   <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">return</span> type;<br>   &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> id;<br>   &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.id = id;<br>   &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>      Object clone = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>         clone = <span class="hljs-keyword">super</span>.clone();<br>      &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>         e.printStackTrace();<br>      &#125;<br>      <span class="hljs-keyword">return</span> clone;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建扩展了上面抽象类的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rectangle</span><span class="hljs-params">()</span></span>&#123;<br>     type = <span class="hljs-string">&quot;Rectangle&quot;</span>;<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Rectangle::draw() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Square</span><span class="hljs-params">()</span></span>&#123;<br>     type = <span class="hljs-string">&quot;Square&quot;</span>;<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Square::draw() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Circle</span><span class="hljs-params">()</span></span>&#123;<br>     type = <span class="hljs-string">&quot;Circle&quot;</span>;<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Circle::draw() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建一个类，从数据库获取实体类，并把它们存储在一个 Hashtable 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Hashtable;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeCache</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap <br>      = <span class="hljs-keyword">new</span> Hashtable&lt;String, Shape&gt;();<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Shape <span class="hljs-title">getShape</span><span class="hljs-params">(String shapeId)</span> </span>&#123;<br>      Shape cachedShape = shapeMap.get(shapeId);<br>      <span class="hljs-keyword">return</span> (Shape) cachedShape.clone();<br>   &#125;<br> <br>   <span class="hljs-comment">// 对每种形状都运行数据库查询，并创建该形状</span><br>   <span class="hljs-comment">// shapeMap.put(shapeKey, shape);</span><br>   <span class="hljs-comment">// 例如，我们要添加三种形状</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadCache</span><span class="hljs-params">()</span> </span>&#123;<br>      Circle circle = <span class="hljs-keyword">new</span> Circle();<br>      circle.setId(<span class="hljs-string">&quot;1&quot;</span>);<br>      shapeMap.put(circle.getId(),circle);<br> <br>      Square square = <span class="hljs-keyword">new</span> Square();<br>      square.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>      shapeMap.put(square.getId(),square);<br> <br>      Rectangle rectangle = <span class="hljs-keyword">new</span> Rectangle();<br>      rectangle.setId(<span class="hljs-string">&quot;3&quot;</span>);<br>      shapeMap.put(rectangle.getId(),rectangle);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>PrototypePatternDemo 使用 ShapeCache 类来获取存储在 Hashtable 中的形状的克隆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrototypePatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      ShapeCache.loadCache();<br> <br>      Shape clonedShape = (Shape) ShapeCache.getShape(<span class="hljs-string">&quot;1&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;Shape : &quot;</span> + clonedShape.getType());        <br> <br>      Shape clonedShape2 = (Shape) ShapeCache.getShape(<span class="hljs-string">&quot;2&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;Shape : &quot;</span> + clonedShape2.getType());        <br> <br>      Shape clonedShape3 = (Shape) ShapeCache.getShape(<span class="hljs-string">&quot;3&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;Shape : &quot;</span> + clonedShape3.getType());        <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>执行程序，输出结果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">Shape : <span class="hljs-type">Circle</span><br>Shape : <span class="hljs-type">Square</span><br>Shape : <span class="hljs-type">Rectangle</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建造者模式</title>
    <link href="/911124688.html"/>
    <url>/911124688.html</url>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p><strong>主要解决：</strong>主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p><p><strong>何时使用：</strong>一些基本部件不会变，而其组合经常变化的时候。</p><p><strong>如何解决：</strong>将变与不变分离开。</p><p><strong>关键代码：</strong>建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</p><p><strong>应用实例：</strong> </p><ul><li>去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。 </li><li>JAVA 中的 StringBuilder。</li></ul><p><strong>优点：</strong> </p><ul><li>建造者独立，易扩展。 </li><li>便于控制细节风险。</li></ul><p><strong>缺点：</strong> </p><ul><li>产品必须有共同点，范围有限制。 </li><li>如内部变化复杂，会有很多的建造类。</li></ul><p><strong>使用场景：</strong> </p><ul><li>需要生成的对象具有复杂的内部结构。 </li><li>需要生成的对象内部属性本身相互依赖。</li></ul><p><strong>注意事项：</strong>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。</p><p>我们将创建一个表示食物条目（比如汉堡和冷饮）的 Item 接口和实现 Item 接口的实体类，以及一个表示食物包装的 Packing 接口和实现 Packing 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。</p><p>然后我们创建一个 Meal 类，带有 Item 的 ArrayList 和一个通过结合 Item 来创建不同类型的 Meal 对象的 MealBuilder。BuilderPatternDemo 类使用 MealBuilder 来创建一个 Meal。</p><p><img src="/img/posts/java/design_patterns/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg" title="建造者模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个表示食物条目和食物包装的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Item</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Packing <span class="hljs-title">packing</span><span class="hljs-params">()</span></span>;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">price</span><span class="hljs-params">()</span></span>;    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Packing</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">pack</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现 Packing 接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Packing</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">pack</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Wrapper&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bottle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Packing</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">pack</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Bottle&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建实现 Item 接口的抽象类，该类提供了默认的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Burger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Item</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Packing <span class="hljs-title">packing</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Wrapper();<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">float</span> <span class="hljs-title">price</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColdDrink</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Item</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Packing <span class="hljs-title">packing</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Bottle();<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">float</span> <span class="hljs-title">price</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>创建扩展了 Burger 和 ColdDrink 的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VegBurger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Burger</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">price</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">25.0f</span>;<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Veg Burger&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChickenBurger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Burger</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">price</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">50.5f</span>;<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Chicken Burger&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coke</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ColdDrink</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">price</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">30.0f</span>;<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Coke&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pepsi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ColdDrink</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">price</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">35.0f</span>;<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Pepsi&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>创建一个 Meal 类，带有上面定义的 Item 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meal</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> List&lt;Item&gt; items = <span class="hljs-keyword">new</span> ArrayList&lt;Item&gt;();    <br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addItem</span><span class="hljs-params">(Item item)</span></span>&#123;<br>      items.add(item);<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getCost</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">float</span> cost = <span class="hljs-number">0.0f</span>;<br>      <span class="hljs-keyword">for</span> (Item item : items) &#123;<br>         cost += item.price();<br>      &#125;        <br>      <span class="hljs-keyword">return</span> cost;<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showItems</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">for</span> (Item item : items) &#123;<br>         System.out.print(<span class="hljs-string">&quot;Item : &quot;</span>+item.name());<br>         System.out.print(<span class="hljs-string">&quot;, Packing : &quot;</span>+item.packing().pack());<br>         System.out.println(<span class="hljs-string">&quot;, Price : &quot;</span>+item.price());<br>      &#125;        <br>   &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤 6"></a>步骤 6</h3><p>创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MealBuilder</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Meal <span class="hljs-title">prepareVegMeal</span> <span class="hljs-params">()</span></span>&#123;<br>      Meal meal = <span class="hljs-keyword">new</span> Meal();<br>      meal.addItem(<span class="hljs-keyword">new</span> VegBurger());<br>      meal.addItem(<span class="hljs-keyword">new</span> Coke());<br>      <span class="hljs-keyword">return</span> meal;<br>   &#125;   <br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Meal <span class="hljs-title">prepareNonVegMeal</span> <span class="hljs-params">()</span></span>&#123;<br>      Meal meal = <span class="hljs-keyword">new</span> Meal();<br>      meal.addItem(<span class="hljs-keyword">new</span> ChickenBurger());<br>      meal.addItem(<span class="hljs-keyword">new</span> Pepsi());<br>      <span class="hljs-keyword">return</span> meal;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤 7"></a>步骤 7</h3><p>BuiderPatternDemo 使用 MealBuider 来演示建造者模式（Builder Pattern）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuilderPatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      MealBuilder mealBuilder = <span class="hljs-keyword">new</span> MealBuilder();<br> <br>      Meal vegMeal = mealBuilder.prepareVegMeal();<br>      System.out.println(<span class="hljs-string">&quot;Veg Meal&quot;</span>);<br>      vegMeal.showItems();<br>      System.out.println(<span class="hljs-string">&quot;Total Cost: &quot;</span> +vegMeal.getCost());<br> <br>      Meal nonVegMeal = mealBuilder.prepareNonVegMeal();<br>      System.out.println(<span class="hljs-string">&quot;\n\nNon-Veg Meal&quot;</span>);<br>      nonVegMeal.showItems();<br>      System.out.println(<span class="hljs-string">&quot;Total Cost: &quot;</span> +nonVegMeal.getCost());<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤 8"></a>步骤 8</h3><p>执行程序，输出结果：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Veg Meal<br>Item : Veg Burger, Packing : <span class="hljs-keyword">Wrapper</span>, Price : <span class="hljs-number">25.0</span><br>Item : Coke, Packing : Bottle, Price : <span class="hljs-number">30.0</span><br>Total <span class="hljs-keyword">Cost</span>: <span class="hljs-number">55.0</span><br><br><br>Non-Veg Meal<br>Item : Chicken Burger, Packing : <span class="hljs-keyword">Wrapper</span>, Price : <span class="hljs-number">50.5</span><br>Item : Pepsi, Packing : Bottle, Price : <span class="hljs-number">35.0</span><br>Total <span class="hljs-keyword">Cost</span>: <span class="hljs-number">85.5</span><br></code></pre></td></tr></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://www.runoob.com/w3cnote/builder-pattern.html">设计模式之建造者(Builder)模式</a></li><li><a href="https://www.runoob.com/w3cnote/builder-pattern-2.html">设计模式：Builder模式</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/911124687.html"/>
    <url>/911124687.html</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><p><strong>何时使用：</strong>当您想控制实例数目，节省系统资源的时候。</p><p><strong>如何解决：</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码：</strong>构造函数是私有的。</p><p><strong>应用实例：</strong></p><ul><li>一个班级只有一个班主任。</li><li>Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</li><li>一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li></ul><p><strong>优点：</strong></p><ul><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li><li>避免对资源的多重占用（比如写文件操作）。</li></ul><p><strong>缺点：</strong>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong>使用场景：</strong></p><ul><li>要求生产唯一序列号。</li><li>WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。</li><li>创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li></ul><p><strong>注意事项：</strong>getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 SingleObject 类。SingleObject 类有它的私有构造函数和本身的一个静态实例。</p><p>SingleObject 类提供了一个静态方法，供外界获取它的静态实例。SingletonPatternDemo 类使用 SingleObject 类来获取 SingleObject 对象。</p><p><img src="/img/posts/java/design_patterns/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.jpg" title="单例模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个 Singleton 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleObject</span> </span>&#123;<br>   <span class="hljs-comment">//创建 SingleObject 的一个对象</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingleObject instance = <span class="hljs-keyword">new</span> SingleObject();<br> <br>   <span class="hljs-comment">//让构造函数为 private，这样该类就不会被实例化</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingleObject</span><span class="hljs-params">()</span></span>&#123;&#125;<br> <br>   <span class="hljs-comment">//获取唯一可用的对象</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleObject <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">return</span> instance;<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showMessage</span><span class="hljs-params">()</span></span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>从 singleton 类获取唯一的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonPatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      <span class="hljs-comment">//不合法的构造函数</span><br>      <span class="hljs-comment">//编译时错误：构造函数 SingleObject() 是不可见的</span><br>      <span class="hljs-comment">//SingleObject object = new SingleObject();</span><br> <br>      <span class="hljs-comment">//获取唯一可用的对象</span><br>      SingleObject object = SingleObject.getInstance();<br> <br>      <span class="hljs-comment">//显示消息</span><br>      object.showMessage();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>执行程序，输出结果：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">Hello World!<br></code></pre></td></tr></table></figure><h2 id="单例模式的几种实现方式"><a href="#单例模式的几种实现方式" class="headerlink" title="单例模式的几种实现方式"></a>单例模式的几种实现方式</h2><p>单例模式的实现有多种方式，如下所示：</p><h3 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>否</p><p><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。</p><p>这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> Singleton();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。</strong></p><h3 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。</p><p><strong>优点：</strong>第一次调用才初始化，避免内存浪费。</p><p><strong>缺点：</strong>必须加锁 synchronized 才能保证单例，但加锁会影响效率。</p><p>getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> Singleton();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p><strong>是否 Lazy 初始化：</strong>否</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式比较常用，但容易产生垃圾对象。</p><p><strong>优点：</strong>没有加锁，执行效率会提高。</p><p><strong>缺点：</strong>类加载时就初始化，浪费内存。</p><p>它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双检锁-双重校验锁（DCL，即-double-checked-locking）"><a href="#双检锁-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="双检锁/双重校验锁（DCL，即 double-checked locking）"></a>双检锁/双重校验锁（DCL，即 double-checked locking）</h3><p><strong>JDK 版本：</strong>JDK1.5 起</p><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>较复杂</p><p><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</p><p>getInstance() 的性能对应用程序很关键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton singleton;  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getSingleton</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>) &#123;  <br>        <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;  <br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>) &#123;  <br>            singleton = <span class="hljs-keyword">new</span> Singleton();  <br>        &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> singleton;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="登记式-静态内部类"><a href="#登记式-静态内部类" class="headerlink" title="登记式/静态内部类"></a>登记式/静态内部类</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>一般</p><p><strong>描述：</strong>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p><p>这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonHolder</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p><strong>JDK 版本：</strong>JDK1.5 起</p><p><strong>是否 Lazy 初始化：</strong>否</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。</p><p>这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。</p><p>不能通过 reflection attack 来调用私有构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    INSTANCE;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">whateverMethod</span><span class="hljs-params">()</span> </span>&#123;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>经验之谈：</strong>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="/911124686.html"/>
    <url>/911124686.html</url>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><strong>主要解决：</strong>主要解决接口选择的问题。</p><p><strong>何时使用：</strong>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p><p><strong>如何解决：</strong>在一个产品族里面，定义多个产品。</p><p><strong>关键代码：</strong>在一个工厂里聚合多个同类产品。</p><p><strong>应用实例：</strong>工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OOP 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。</p><p><strong>优点：</strong>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p><strong>缺点：</strong>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p><p><strong>使用场景：</strong></p><ul><li>QQ 换皮肤，一整套一起换。 </li><li>生成不同操作系统的程序。</li></ul><p><strong>注意事项：</strong>产品族难扩展，产品等级易扩展。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建 Shape 和 Color 接口和实现这些接口的实体类。下一步是创建抽象工厂类 AbstractFactory。接着定义工厂类 ShapeFactory 和 ColorFactory，这两个工厂类都是扩展了 AbstractFactory。然后创建一个工厂创造器/生成器类 FactoryProducer。</p><p>AbstractFactoryPatternDemo 类使用 FactoryProducer 来获取 AbstractFactory 对象。它将向 AbstractFactory 传递形状信息 Shape（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。同时它还向 AbstractFactory 传递颜色信息 Color（RED / GREEN / BLUE），以便获取它所需对象的类型。</p><p><img src="/img/posts/java/design_patterns/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.jpg" title="抽象工厂模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>为形状创建一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Rectangle::draw() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Square::draw() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Circle::draw() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>为颜色创建一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Color</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>创建实现接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Red</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Color</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Red::fill() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Green</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Color</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Green::fill() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blue</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Color</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Blue::fill() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>为 Color 和 Shape 对象创建抽象类来获取工厂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Color <span class="hljs-title">getColor</span><span class="hljs-params">(String color)</span></span>;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Shape <span class="hljs-title">getShape</span><span class="hljs-params">(String shape)</span> </span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤 6"></a>步骤 6</h3><p>创建扩展了 AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Shape <span class="hljs-title">getShape</span><span class="hljs-params">(String shapeType)</span></span>&#123;<br>      <span class="hljs-keyword">if</span>(shapeType == <span class="hljs-keyword">null</span>)&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>      &#125;        <br>      <span class="hljs-keyword">if</span>(shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;CIRCLE&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Circle();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;RECTANGLE&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Rectangle();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;SQUARE&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Square();<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Color <span class="hljs-title">getColor</span><span class="hljs-params">(String color)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColorFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Shape <span class="hljs-title">getShape</span><span class="hljs-params">(String shapeType)</span></span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Color <span class="hljs-title">getColor</span><span class="hljs-params">(String color)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span>(color == <span class="hljs-keyword">null</span>)&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>      &#125;        <br>      <span class="hljs-keyword">if</span>(color.equalsIgnoreCase(<span class="hljs-string">&quot;RED&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Red();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(color.equalsIgnoreCase(<span class="hljs-string">&quot;GREEN&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Green();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(color.equalsIgnoreCase(<span class="hljs-string">&quot;BLUE&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Blue();<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤 7"></a>步骤 7</h3><p>创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryProducer</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AbstractFactory <span class="hljs-title">getFactory</span><span class="hljs-params">(String choice)</span></span>&#123;<br>      <span class="hljs-keyword">if</span>(choice.equalsIgnoreCase(<span class="hljs-string">&quot;SHAPE&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ShapeFactory();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(choice.equalsIgnoreCase(<span class="hljs-string">&quot;COLOR&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ColorFactory();<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤 8"></a>步骤 8</h3><p>使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactoryPatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> <br>      <span class="hljs-comment">//获取形状工厂</span><br>      AbstractFactory shapeFactory = FactoryProducer.getFactory(<span class="hljs-string">&quot;SHAPE&quot;</span>);<br> <br>      <span class="hljs-comment">//获取形状为 Circle 的对象</span><br>      Shape shape1 = shapeFactory.getShape(<span class="hljs-string">&quot;CIRCLE&quot;</span>);<br> <br>      <span class="hljs-comment">//调用 Circle 的 draw 方法</span><br>      shape1.draw();<br> <br>      <span class="hljs-comment">//获取形状为 Rectangle 的对象</span><br>      Shape shape2 = shapeFactory.getShape(<span class="hljs-string">&quot;RECTANGLE&quot;</span>);<br> <br>      <span class="hljs-comment">//调用 Rectangle 的 draw 方法</span><br>      shape2.draw();<br>      <br>      <span class="hljs-comment">//获取形状为 Square 的对象</span><br>      Shape shape3 = shapeFactory.getShape(<span class="hljs-string">&quot;SQUARE&quot;</span>);<br> <br>      <span class="hljs-comment">//调用 Square 的 draw 方法</span><br>      shape3.draw();<br> <br>      <span class="hljs-comment">//获取颜色工厂</span><br>      AbstractFactory colorFactory = FactoryProducer.getFactory(<span class="hljs-string">&quot;COLOR&quot;</span>);<br> <br>      <span class="hljs-comment">//获取颜色为 Red 的对象</span><br>      Color color1 = colorFactory.getColor(<span class="hljs-string">&quot;RED&quot;</span>);<br> <br>      <span class="hljs-comment">//调用 Red 的 fill 方法</span><br>      color1.fill();<br> <br>      <span class="hljs-comment">//获取颜色为 Green 的对象</span><br>      Color color2 = colorFactory.getColor(<span class="hljs-string">&quot;Green&quot;</span>);<br> <br>      <span class="hljs-comment">//调用 Green 的 fill 方法</span><br>      color2.fill();<br> <br>      <span class="hljs-comment">//获取颜色为 Blue 的对象</span><br>      Color color3 = colorFactory.getColor(<span class="hljs-string">&quot;BLUE&quot;</span>);<br> <br>      <span class="hljs-comment">//调用 Blue 的 fill 方法</span><br>      color3.fill();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-9"><a href="#步骤-9" class="headerlink" title="步骤 9"></a>步骤 9</h3><p>执行程序，输出结果：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">Inside Circle::<span class="hljs-built_in">draw</span>() <span class="hljs-built_in">method</span>.<br>Inside Rectangle::<span class="hljs-built_in">draw</span>() <span class="hljs-built_in">method</span>.<br>Inside Square::<span class="hljs-built_in">draw</span>() <span class="hljs-built_in">method</span>.<br>Inside Red::fill() <span class="hljs-built_in">method</span>.<br>Inside Green::fill() <span class="hljs-built_in">method</span>.<br>Inside Blue::fill() <span class="hljs-built_in">method</span>.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/911124685.html"/>
    <url>/911124685.html</url>
    
    <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><p><strong>主要解决：</strong>主要解决接口选择的问题。</p><p><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。</p><p><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。</p><p><strong>关键代码：</strong>创建过程在其子类执行。</p><p><strong>应用实例：</strong></p><ul><li>您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 </li><li>Hibernate 换数据库只需换方言和驱动就可以。</li></ul><p><strong>优点：</strong></p><ul><li>一个调用者想创建一个对象，只要知道其名称就可以了。 </li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 </li><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li></ul><p><strong>缺点：</strong>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p><p><strong>使用场景：</strong></p><ul><li>日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 </li><li>数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 </li><li>设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</li></ul><p><strong>注意事项：</strong>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 Shape 接口和实现 Shape 接口的实体类。下一步是定义工厂类 ShapeFactory。</p><p>FactoryPatternDemo 类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。</p><p><img src="/img/posts/java/design_patterns/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.jpg" title="工厂模式"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Rectangle::draw() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Square::draw() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Inside Circle::draw() method.&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeFactory</span> </span>&#123;<br>   <span class="hljs-comment">//使用 getShape 方法获取形状类型的对象</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Shape <span class="hljs-title">getShape</span><span class="hljs-params">(String shapeType)</span></span>&#123;<br>      <span class="hljs-keyword">if</span>(shapeType == <span class="hljs-keyword">null</span>)&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>      &#125;        <br>      <span class="hljs-keyword">if</span>(shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;CIRCLE&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Circle();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;RECTANGLE&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Rectangle();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;SQUARE&quot;</span>))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Square();<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>使用该工厂，通过传递类型信息来获取实体类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryPatternDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      ShapeFactory shapeFactory = <span class="hljs-keyword">new</span> ShapeFactory();<br> <br>      <span class="hljs-comment">//获取 Circle 的对象，并调用它的 draw 方法</span><br>      Shape shape1 = shapeFactory.getShape(<span class="hljs-string">&quot;CIRCLE&quot;</span>);<br> <br>      <span class="hljs-comment">//调用 Circle 的 draw 方法</span><br>      shape1.draw();<br> <br>      <span class="hljs-comment">//获取 Rectangle 的对象，并调用它的 draw 方法</span><br>      Shape shape2 = shapeFactory.getShape(<span class="hljs-string">&quot;RECTANGLE&quot;</span>);<br> <br>      <span class="hljs-comment">//调用 Rectangle 的 draw 方法</span><br>      shape2.draw();<br> <br>      <span class="hljs-comment">//获取 Square 的对象，并调用它的 draw 方法</span><br>      Shape shape3 = shapeFactory.getShape(<span class="hljs-string">&quot;SQUARE&quot;</span>);<br> <br>      <span class="hljs-comment">//调用 Square 的 draw 方法</span><br>      shape3.draw();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>执行程序，输出结果：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">Inside Circle::<span class="hljs-built_in">draw</span>() <span class="hljs-built_in">method</span>.<br>Inside Rectangle::<span class="hljs-built_in">draw</span>() <span class="hljs-built_in">method</span>.<br>Inside Square::<span class="hljs-built_in">draw</span>() <span class="hljs-built_in">method</span>.<br></code></pre></td></tr></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://www.runoob.com/w3cnote/factory-pattern.html">设计模式 – 工厂模式</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/911124684.html"/>
    <url>/911124684.html</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p><h2 id="什么是-GOF（四人帮，全拼-Gang-of-Four）？"><a href="#什么是-GOF（四人帮，全拼-Gang-of-Four）？" class="headerlink" title="什么是 GOF（四人帮，全拼 Gang of Four）？"></a>什么是 GOF（四人帮，全拼 Gang of Four）？</h2><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。</p><p>四位作者合称 GOF（四人帮，全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p><ul><li><p>对接口编程而不是对实现编程。</p></li><li><p>优先使用对象组合而不是继承。</p></li></ul><h2 id="设计模式的使用"><a href="#设计模式的使用" class="headerlink" title="设计模式的使用"></a>设计模式的使用</h2><p>设计模式在软件开发中的两个主要用途。</p><h3 id="开发人员的共同平台"><a href="#开发人员的共同平台" class="headerlink" title="开发人员的共同平台"></a>开发人员的共同平台</h3><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p><h3 id="最佳的实践"><a href="#最佳的实践" class="headerlink" title="最佳的实践"></a>最佳的实践</h3><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>根据设计模式的参考书 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。</p><table>    <tr>        <td>序号</td>        <td>模式 & 描述</td>        <td>包括</td>    </tr>    <tr>        <td>1</td>        <td><strong>创建型模式</strong><br>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</td>        <td>            <ul style="width: 40vh">                <li>工厂模式（Factory Pattern）</li>                <li>抽象工厂模式（Abstract Factory Pattern）</li>                <li>单例模式（Singleton Pattern）</li>                <li>建造者模式（Builder Pattern）</li>                <li>原型模式（Prototype Pattern）</li>            </ul>        </td>    </tr>    <tr>        <td>2</td>        <td><strong>结构型模式</strong><br>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td>        <td>            <ul style="width: 40vh">                <li>适配器模式（Adapter Pattern）</li>                <li>桥接模式（Bridge Pattern）</li>                <li>过滤器模式（Filter、Criteria Pattern）</li>                <li>组合模式（Composite Pattern）</li>                <li>装饰器模式（Decorator Pattern）</li>                <li>外观模式（Facade Pattern）</li>                <li>享元模式（Flyweight Pattern）</li>                <li>代理模式（Proxy Pattern）</li>            </ul>        </td>    </tr>    <tr>        <td>3</td>        <td><strong>行为型模式</strong><br>这些设计模式特别关注对象之间的通信。</td>        <td>            <ul style="width: 40vh">                <li>责任链模式（Chain of Responsibility Pattern）</li>                <li>命令模式（Command Pattern）</li>                <li>解释器模式（Interpreter Pattern）</li>                <li>迭代器模式（Iterator Pattern）</li>                <li>中介者模式（Mediator Pattern）</li>                <li>备忘录模式（Memento Pattern）</li>                <li>观察者模式（Observer Pattern）</li>                <li>状态模式（State Pattern）</li>                <li>空对象模式（Null Object Pattern）</li>                <li>策略模式（Strategy Pattern）</li>                <li>模板模式（Template Pattern）</li>                <li>访问者模式（Visitor Pattern）</li>            </ul>        </td>    </tr>    <tr>        <td style="width: 8vh">4</td>        <td style="width: 40vh"><strong>J2EE 模式</strong><br>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</td>        <td style="width: 40vh">            <ul>                <li>MVC 模式（MVC Pattern）</li>                <li>业务代表模式（Business Delegate Pattern）</li>                <li>组合实体模式（Composite Entity Pattern）</li>                <li>数据访问对象模式（Data Access Object Pattern）</li>                <li>前端控制器模式（Front Controller Pattern）</li>                <li>拦截过滤器模式（Intercepting Filter Pattern）</li>                <li>服务定位器模式（Service Locator Pattern）</li>                <li>传输对象模式（Transfer Object Pattern）</li>            </ul>        </td>    </tr></table><p>下面用一个图片来整体描述一下设计模式之间的关系：</p><p><img src="/img/posts/java/Relationship_Between_Design_Patterns.jpg"></p><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><h3 id="开闭原则（Open-Close-Principle）"><a href="#开闭原则（Open-Close-Principle）" class="headerlink" title="开闭原则（Open Close Principle）"></a>开闭原则（Open Close Principle）</h3><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><h3 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a>里氏代换原则（Liskov Substitution Principle）</h3><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><h3 id="依赖倒转原则（Dependence-Inversion-Principle）"><a href="#依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒转原则（Dependence Inversion Principle）"></a>依赖倒转原则（Dependence Inversion Principle）</h3><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><h3 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h3><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><h3 id="迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="迪米特法则，又称最少知道原则（Demeter Principle）"></a>迪米特法则，又称最少知道原则（Demeter Principle）</h3><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h3 id="合成复用原则（Composite-Reuse-Principle）"><a href="#合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="合成复用原则（Composite Reuse Principle）"></a>合成复用原则（Composite Reuse Principle）</h3><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p><h2 id="设计模式详解"><a href="#设计模式详解" class="headerlink" title="设计模式详解"></a>设计模式详解</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><blockquote><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p></blockquote><ul><li><a href="/911124685.html">工厂模式（Factory Pattern）</a></li><li><a href="/911124686.html">抽象工厂模式（Abstract Factory Pattern）</a></li><li><a href="/911124687.html">单例模式（Singleton Pattern）</a></li><li><a href="/911124688.html">建造者模式（Builder Pattern）</a></li><li><a href="/911124689.html">原型模式（Prototype Pattern）</a></li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><blockquote><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p></blockquote><ul><li><a href="/911124690.html">适配器模式（Adapter Pattern）</a></li><li><a href="/911124691.html">桥接模式（Bridge Pattern）</a></li><li><a href="/911124692.html">过滤器模式（Filter、Criteria Pattern）</a></li><li><a href="/911124693.html">组合模式（Composite Pattern）</a></li><li><a href="/911124694.html">装饰器模式（Decorator Pattern）</a></li><li><a href="/911124695.html">外观模式（Facade Pattern）</a></li><li><a href="/911124696.html">享元模式（Flyweight Pattern）</a></li><li><a href="/911124697.html">代理模式（Proxy Pattern）</a></li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><blockquote><p>这些设计模式特别关注对象之间的通信。</p></blockquote><ul><li><a href="/911124698.html">责任链模式（Chain of Responsibility Pattern）</a></li><li><a href="/911124699.html">命令模式（Command Pattern）</a></li><li><a href="/911124700.html">解释器模式（Interpreter Pattern）</a></li><li><a href="/911124701.html">迭代器模式（Iterator Pattern）</a></li><li><a href="/911124702.html">中介者模式（Mediator Pattern）</a></li><li><a href="/911124703.html">备忘录模式（Memento Pattern）</a></li><li><a href="/911124704.html">观察者模式（Observer Pattern）</a></li><li><a href="/911124705.html">状态模式（State Pattern）</a></li><li><a href="/911124706.html">空对象模式（Null Object Pattern）</a></li><li><a href="/911124707.html">策略模式（Strategy Pattern）</a></li><li><a href="/911124708.html">模板模式（Template Pattern）</a></li><li><a href="/911124709.html">访问者模式（Visitor Pattern）</a></li></ul><h3 id="J2EE-模式"><a href="#J2EE-模式" class="headerlink" title="J2EE 模式"></a>J2EE 模式</h3><blockquote><p>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</p></blockquote><ul><li><a href="/911124685.html">MVC 模式（MVC Pattern）</a></li><li><a href="/911124685.html">业务代表模式（Business Delegate Pattern）</a></li><li><a href="/911124685.html">组合实体模式（Composite Entity Pattern）</a></li><li><a href="/911124685.html">数据访问对象模式（Data Access Object Pattern）</a></li><li><a href="/911124685.html">前端控制器模式（Front Controller Pattern）</a></li><li><a href="/911124685.html">拦截过滤器模式（Intercepting Filter Pattern）</a></li><li><a href="/911124685.html">服务定位器模式（Service Locator Pattern）</a></li><li><a href="/911124685.html">传输对象模式（Transfer Object Pattern）</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络基础</title>
    <link href="/2434046563.html"/>
    <url>/2434046563.html</url>
    
    <content type="html"><![CDATA[<h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h2 id="1-http-响应码-301-和-302-代表的是什么？有什么区别？"><a href="#1-http-响应码-301-和-302-代表的是什么？有什么区别？" class="headerlink" title="1.http 响应码 301 和 302 代表的是什么？有什么区别？"></a>1.http 响应码 301 和 302 代表的是什么？有什么区别？</h2><p>301，302 都是HTTP状态的编码，都代表着某个URL发生了转移。</p><p>区别：</p><ul><li><p>301 redirect: 301 代表永久性转移(Permanently Moved)。</p></li><li><p>302 redirect: 302 代表暂时性转移(Temporarily Moved )。</p></li></ul><h2 id="2-forward-和-redirect-的区别？"><a href="#2-forward-和-redirect-的区别？" class="headerlink" title="2.forward 和 redirect 的区别？"></a>2.forward 和 redirect 的区别？</h2><p>Forward和Redirect代表了两种请求转发方式：直接转发和间接转发。</p><p>直接转发方式（Forward），客户端和浏览器只发出一次请求，Servlet、HTML、JSP或其它信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。</p><blockquote><p>例子：“A找B借钱，B说没有，B去找C借，借到借不到都会把消息传递给A”；</p></blockquote><p>间接转发方式（Redirect）实际是两次HTTP请求，服务器端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。</p><blockquote><p>例子：“A找B借钱，B说没有，让A去找C借”。</p></blockquote><h2 id="3-tcp-和-udp的区别？"><a href="#3-tcp-和-udp的区别？" class="headerlink" title="3.tcp 和 udp的区别？"></a>3.tcp 和 udp的区别？</h2><ul><li><p>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接。</p></li><li><p>CP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。</p></li><li><p>cp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</p></li><li><p>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</p></li><li><p>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信。</p></li><li><p>TCP对系统资源要求较多，UDP对系统资源要求较少。</p></li></ul><h2 id="4-tcp-为什么要三次握手，两次不行吗？为什么？"><a href="#4-tcp-为什么要三次握手，两次不行吗？为什么？" class="headerlink" title="4.tcp 为什么要三次握手，两次不行吗？为什么？"></a>4.tcp 为什么要三次握手，两次不行吗？为什么？</h2><p>为了实现可靠数据传输， TCP 协议的通信双方， 都必须维护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤。</p><p>如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认。</p><h2 id="5-tcp粘包是怎么产生的？"><a href="#5-tcp粘包是怎么产生的？" class="headerlink" title="5.tcp粘包是怎么产生的？"></a>5.tcp粘包是怎么产生的？</h2><ul><li>发送方产生粘包</li></ul><p>采用TCP协议传输数据的客户端与服务器经常是保持一个长连接的状态（一次连接发一次数据不存在粘包），双方在连接不断开的情况下，可以一直传输数据；但当发送的数据包过于的小时，那么TCP协议默认的会启用Nagle算法，将这些较小的数据包进行合并发送（缓冲区数据发送是一个堆压的过程）；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。</p><p><img src="/img/posts/web/%E5%8F%91%E9%80%81%E6%96%B9%E4%BA%A7%E7%94%9F%E7%B2%98%E5%8C%85.png" title="发送方产生粘包"></p><ul><li>接收方产生粘包</li></ul><p>接收方采用TCP协议接收数据时的过程是这样的：数据到底接收方，从网络模型的下方传递至传输层，传输层的TCP协议处理是将其放置接收缓冲区，然后由应用层来主动获取（C语言用recv、read等函数）；这时会出现一个问题，就是我们在程序中调用的读取数据函数不能及时的把缓冲区中的数据拿出来，而下一个数据又到来并有一部分放入的缓冲区末尾，等我们读取数据时就是一个粘包。（放数据的速度 &gt; 应用层拿数据速度）</p><p><img src="/img/posts/web/%E6%8E%A5%E6%94%B6%E6%96%B9%E4%BA%A7%E7%94%9F%E7%B2%98%E5%8C%85.png" title="接收方产生粘包"></p><h2 id="6-OSI-的七层模型都有哪些？"><a href="#6-OSI-的七层模型都有哪些？" class="headerlink" title="6.OSI 的七层模型都有哪些？"></a>6.OSI 的七层模型都有哪些？</h2><ul><li><p>应用层：网络服务与最终用户的一个接口。</p></li><li><p>表示层：数据的表示、安全、压缩。</p></li><li><p>会话层：建立、管理、终止会话。</p></li><li><p>传输层：定义传输数据的协议端口号，以及流控和差错校验。</p></li><li><p>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。</p></li><li><p>数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。</p></li><li><p>物理层：建立、维护、断开物理连接。</p></li></ul><h2 id="7-get-和-post-请求有哪些区别？"><a href="#7-get-和-post-请求有哪些区别？" class="headerlink" title="7.get 和 post 请求有哪些区别？"></a>7.get 和 post 请求有哪些区别？</h2><ul><li><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p></li><li><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p></li><li><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p></li><li><p>GET请求只能进行url编码，而POST支持多种编码方式。</p></li><li><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p></li><li><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p></li><li><p>参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p></li><li><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p></li><li><p>GET参数通过URL传递，POST放在Request body中。</p></li></ul><h2 id="8-如何实现跨域？"><a href="#8-如何实现跨域？" class="headerlink" title="8.如何实现跨域？"></a>8.如何实现跨域？</h2><h3 id="1-图片ping或script标签跨域"><a href="#1-图片ping或script标签跨域" class="headerlink" title="1.图片ping或script标签跨域"></a>1.图片ping或script标签跨域</h3><p>图片ping常用于跟踪用户点击页面或动态广告曝光次数。<br>script标签可以得到从其他来源数据，这也是JSONP依赖的根据。</p><h3 id="2-JSONP跨域"><a href="#2-JSONP跨域" class="headerlink" title="2.JSONP跨域"></a>2.JSONP跨域</h3><p>JSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的影响，而利用</p><ul><li><p>只能使用Get请求</p></li><li><p>不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败</p></li><li><p>JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保</p></li></ul><h3 id="3-CORS"><a href="#3-CORS" class="headerlink" title="3.CORS"></a>3.CORS</h3><p>Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Access-Control-Allow-Origin: *<br>Access-Control-Allow-Methods: POST, GET, OPTIONS<br>Access-Control-Allow-Headers: X-PINGOTHER, Content-Type<br>Access-Control-Max-Age: <span class="hljs-number">86400</span><br></code></pre></td></tr></table></figure><p>跨域请求默认不会携带Cookie信息，如果需要携带，请配置下述参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>: <span class="hljs-keyword">true</span><br><span class="hljs-comment">// Ajax设置</span><br><span class="hljs-string">&quot;withCredentials&quot;</span>: <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><h3 id="4-修改document-domain跨子域"><a href="#4-修改document-domain跨子域" class="headerlink" title="4.修改document.domain跨子域"></a>4.修改document.domain跨子域</h3><p>前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域</p><p>在根域范围内，允许把domain属性的值设置为它的上一级域。例如，在”aaa.xxx.com”域内，可以把domain设置为 “xxx.com” 但不能设置为 “xxx.org” 或者”com”。</p><blockquote><p>假如存在两个域名aaa.xxx.com和bbb.xxx.com。需要在aaa下嵌入bbb的页面，<br>由于其document.name不一致，无法在aaa下操作bbb的js。<br>可以在aaa和bbb下通过js将document.name = ‘xxx.com’;<br>设置一致，来达到互相访问的作用。</p></blockquote><h3 id="5-WebSocket"><a href="#5-WebSocket" class="headerlink" title="5.WebSocket"></a>5.WebSocket</h3><p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。相关文章，请查看：WebSocket、WebSocket-SockJS</p><p>需要注意：WebSocket对象不支持DOM 2级事件侦听器，必须使用DOM 0级语法分别定义各个事件。</p><h3 id="6-代理"><a href="#6-代理" class="headerlink" title="6.代理"></a>6.代理</h3><p>同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题</p><p>DomainA客户端（浏览器） ==&gt; DomainA服务器 ==&gt; DomainB服务器 ==&gt; DomainA客户端（浏览器）</p><h3 id="8-window-postMessage"><a href="#8-window-postMessage" class="headerlink" title="8.window.postMessage()"></a>8.window.postMessage()</h3><p>HTML5新特性，可以用来向其他所有的 window 对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送 MessageEvent，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。</p><h3 id="7-window-name-iframe"><a href="#7-window-name-iframe" class="headerlink" title="7.window.name + iframe"></a>7.window.name + iframe</h3><p>window.name通过在iframe（一般动态创建i）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给window.name。然后，请求者可以检索window.name值作为响应。</p><ul><li><p>iframe标签的跨域能力；</p></li><li><p>indow.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。</p></li></ul><p>每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 下述用端口 10000表示：domainA；10001表示：domainB --&gt;</span><br><br><span class="hljs-comment">&lt;!-- localhost:10000 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> iframe = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;iframe&#x27;</span>);</span><br><span class="javascript">    iframe.style.display = <span class="hljs-string">&#x27;none&#x27;</span>; <span class="hljs-comment">// 隐藏</span></span><br>    <br><span class="javascript">    <span class="hljs-keyword">var</span> state = <span class="hljs-number">0</span>; <span class="hljs-comment">// 防止页面无限刷新</span></span><br><span class="javascript">    iframe.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(state === <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(iframe.contentWindow.name));</span><br><span class="javascript">            <span class="hljs-comment">// 清除创建的iframe</span></span><br><span class="javascript">            iframe.contentWindow.document.write(<span class="hljs-string">&#x27;&#x27;</span>);</span><br>            iframe.contentWindow.close();<br><span class="javascript">            <span class="hljs-built_in">document</span>.body.removeChild(iframe);</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(state === <span class="hljs-number">0</span>) &#123;</span><br>            state = 1;<br><span class="javascript">            <span class="hljs-comment">// 加载完成，指向当前域，防止错误(proxy.html为空白页面)</span></span><br><span class="javascript">            <span class="hljs-comment">// Blocked a frame with origin &quot;http://localhost:10000&quot; from accessing a cross-origin frame.</span></span><br><span class="javascript">            iframe.contentWindow.location = <span class="hljs-string">&#x27;http://localhost:10000/proxy.html&#x27;</span>;</span><br>        &#125;<br>    &#125;;<br>    <br><span class="javascript">    iframe.src = <span class="hljs-string">&#x27;http://localhost:10001&#x27;</span>;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.body.appendChild(iframe);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- localhost:10001 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-built_in">window</span>.name = <span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>&#125;);</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="9-JSONP-实现原理？"><a href="#9-JSONP-实现原理？" class="headerlink" title="9.JSONP 实现原理？"></a>9.JSONP 实现原理？</h2><p>jsonp 即 json+padding，动态创建script标签，利用script标签的src属性可以获取任何域下的js脚本，通过这个特性(也可以说漏洞)，服务器端不在返回json格式，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java异常</title>
    <link href="/4103448943.html"/>
    <url>/4103448943.html</url>
    
    <content type="html"><![CDATA[<h2 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h2><h2 id="1-throw-和-throws-的区别？"><a href="#1-throw-和-throws-的区别？" class="headerlink" title="1.throw 和 throws 的区别？"></a>1.throw 和 throws 的区别？</h2><p>throws是用来声明一个方法可能抛出的所有异常信息，throws是将异常声明但是不处理，而是将异常往上传，谁调用我就交给谁处理。而throw则是指抛出的一个具体的异常类型。</p><h2 id="2-final、finally、finalize-有什么区别？"><a href="#2-final、finally、finalize-有什么区别？" class="headerlink" title="2.final、finally、finalize 有什么区别？"></a>2.final、finally、finalize 有什么区别？</h2><ul><li><p>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</p></li><li><p>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</p></li><li><p>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System的gc()方法的时候，由垃圾回收器调用finalize(),回收垃圾。</p></li></ul><h2 id="3-try-catch-finally-中哪个部分可以省略？"><a href="#3-try-catch-finally-中哪个部分可以省略？" class="headerlink" title="3.try-catch-finally 中哪个部分可以省略？"></a>3.try-catch-finally 中哪个部分可以省略？</h2><p>catch 可以省略</p><p><strong>原因：</strong></p><p>更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处理，编译是通不过的，因为编译器硬性规定，普通异常如果选择捕获，则必须用catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定，所以catch可以省略，你加上catch编译器也觉得无可厚非。</p><p>理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对所有代码加上try，代码在运行期时也只不过是在正常运行的基础上加一层皮。但是你一旦对一段代码加上try，就等于显示地承诺编译器，对这段代码可能抛出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须用catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且使用finally扫尾处理，或者加上catch捕获以便进一步处理。</p><p>至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。</p><h2 id="4-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？"><a href="#4-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？" class="headerlink" title="4.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？"></a>4.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？</h2><p>会执行，在 return 前执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinallyDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(getInt());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getInt</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(a / <span class="hljs-number">0</span>);<br>            a = <span class="hljs-number">20</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            a = <span class="hljs-number">30</span>;<br>            <span class="hljs-keyword">return</span> a;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了</span><br><span class="hljs-comment">             * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40</span><br><span class="hljs-comment">             * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30</span><br><span class="hljs-comment">             */</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            a = <span class="hljs-number">40</span>;<br>            <span class="hljs-comment">// return a; //如果在这里返回，就又重新形成了一条返回路径，由于只能通过1个return返回，所以这里直接返回40</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-常见的异常类有哪些？"><a href="#5-常见的异常类有哪些？" class="headerlink" title="5.常见的异常类有哪些？"></a>5.常见的异常类有哪些？</h2><ul><li><p>NullPointerException：当应用程序试图访问空对象时，则抛出该异常。</p></li><li><p>SQLException：提供关于数据库访问错误或其他错误信息的异常。</p></li><li><p>IndexOutOfBoundsException：指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</p></li><li><p>NumberFormatException：当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</p></li><li><p>FileNotFoundException：当试图打开指定路径名表示的文件失败时，抛出此异常。</p></li><li><p>IOException：当发生某种I/O异常时，抛出此异常。此类是失败或中断的I/O操作生成的异常的通用类。</p></li><li><p>ClassCastException：当试图将对象强制转换为不是实例的子类时，抛出该异常。</p></li><li><p>ArrayStoreException：试图将错误类型的对象存储到一个对象数组时抛出的异常。</p></li><li><p>IllegalArgumentException：抛出的异常表明向方法传递了一个不合法或不正确的参数。</p></li><li><p>ArithmeticException：当出现异常的运算条件时，抛出此异常。例如，一个整数“除以零”时，抛出此类的一个实例。</p></li><li><p>NegativeArraySizeException：如果应用程序试图创建大小为负的数组，则抛出该异常。</p></li><li><p>NoSuchMethodException：无法找到某一特定方法时，抛出该异常。</p></li><li><p>SecurityException：由安全管理器抛出的异常，指示存在安全侵犯。</p></li><li><p>UnsupportedOperationException：当不支持请求的操作时，抛出该异常。</p></li><li><p>RuntimeExceptionRuntimeException：是那些可能在Java虚拟机正常运行期间抛出的异常的超类。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2574387996.html"/>
    <url>/2574387996.html</url>
    
    <content type="html"><![CDATA[<h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h2 id="1-jsp-和-servlet-有什么区别？"><a href="#1-jsp-和-servlet-有什么区别？" class="headerlink" title="1.jsp 和 servlet 有什么区别？"></a>1.jsp 和 servlet 有什么区别？</h2><ol><li><p>jsp经编译后就变成了Servlet.（JSP的本质就是Servlet，JVM只能识别java的类，不能识别JSP的代码，Web容器将JSP的代码编译成JVM能够识别的java类）</p></li><li><p>jsp更擅长表现于页面显示，servlet更擅长于逻辑控制。</p></li><li><p>Servlet中没有内置对象，Jsp中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。</p></li><li><p>Jsp是Servlet的一种简化，使用Jsp只需要完成程序员需要输出到客户端的内容，Jsp中的Java脚本如何镶嵌到一个类中，由Jsp容器完成。而Servlet则是个完整的Java类，这个类的Service方法用于生成对客户端的响应。</p></li></ol><h2 id="2-jsp-有哪些内置对象？作用分别是什么？"><a href="#2-jsp-有哪些内置对象？作用分别是什么？" class="headerlink" title="2.jsp 有哪些内置对象？作用分别是什么？"></a>2.jsp 有哪些内置对象？作用分别是什么？</h2><p>JSP有9个内置对象：</p><ul><li><p>request：封装客户端的请求，其中包含来自GET或POST请求的参数；</p></li><li><p>response：封装服务器对客户端的响应；</p></li><li><p>pageContext：通过该对象可以获取其他对象；</p></li><li><p>session：封装用户会话的对象；</p></li><li><p>application：封装服务器运行环境的对象；</p></li><li><p>out：输出服务器响应的输出流对象；</p></li><li><p>config：Web应用的配置对象；</p></li><li><p>page：JSP页面本身（相当于Java程序中的this）；</p></li><li><p>exception：封装页面抛出异常的对象。</p></li></ul><h2 id="3-说一下-jsp-的-4-种作用域？"><a href="#3-说一下-jsp-的-4-种作用域？" class="headerlink" title="3.说一下 jsp 的 4 种作用域？"></a>3.说一下 jsp 的 4 种作用域？</h2><p>JSP中的四种作用域包括page、request、session和application，具体来说：</p><ul><li><p>page代表与一个页面相关的对象和属性。</p></li><li><p>request代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。</p></li><li><p>session代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。</p></li><li><p>application代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。</p></li></ul><h2 id="4-session-和-cookie-有什么区别？"><a href="#4-session-和-cookie-有什么区别？" class="headerlink" title="4.session 和 cookie 有什么区别？"></a>4.session 和 cookie 有什么区别？</h2><ul><li><p>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。</p></li><li><p>思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。</p></li><li><p>Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</p></li></ul><h2 id="5-说一下-session-的工作原理？"><a href="#5-说一下-session-的工作原理？" class="headerlink" title="5.说一下 session 的工作原理？"></a>5.说一下 session 的工作原理？</h2><p> 其实session是一个存在服务器上的类似于一个散列表格的文件。里面存有我们需要的信息，在我们需要用的时候可以从里面取出来。类似于一个大号的map吧，里面的键存储的是用户的sessionid，用户向服务器发送请求的时候会带上这个sessionid。这时就可以从中取出对应的值了。</p><h2 id="6-如果客户端禁止-cookie-能实现-session-还能用吗？"><a href="#6-如果客户端禁止-cookie-能实现-session-还能用吗？" class="headerlink" title="6.如果客户端禁止 cookie 能实现 session 还能用吗？"></a>6.如果客户端禁止 cookie 能实现 session 还能用吗？</h2><p>Cookie与 Session，一般认为是两个独立的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案。但为什么禁用Cookie就不能得到Session呢？因为Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的，禁用Cookie相当于失去了Session ID，也就得不到Session了。</p><p>假定用户关闭Cookie的情况下使用Session，其实现途径有以下几种：</p><ol><li><p>设置php.ini配置文件中的“session.use_trans_sid = 1”，或者编译时打开打开了“–enable-trans-sid”选项，让PHP自动跨页传递Session ID。</p></li><li><p>手动通过URL传值、隐藏表单传递Session ID。</p></li><li><p>用文件、数据库等形式保存Session ID，在跨页过程中手动调用。</p></li></ol><h2 id="7-spring-mvc-和-struts-的区别是什么？"><a href="#7-spring-mvc-和-struts-的区别是什么？" class="headerlink" title="7.spring mvc 和 struts 的区别是什么？"></a>7.spring mvc 和 struts 的区别是什么？</h2><h3 id="拦截机制的不同"><a href="#拦截机制的不同" class="headerlink" title="拦截机制的不同"></a>拦截机制的不同</h3><p>Struts2是类级别的拦截，每次请求就会创建一个Action，和Spring整合时Struts2的ActionBean注入作用域是原型模式prototype，然后通过setter，getter吧request数据注入到属性。Struts2中，一个Action对应一个request，response上下文，在接收参数时，可以通过属性接收，这说明属性参数是让多个方法共享的。Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了，只能设计为多例。</p><p>SpringMVC是方法级别的拦截，一个方法对应一个Request上下文，所以方法直接基本上是独立的，独享request，response数据。而每个方法同时又何一个url对应，参数的传递是直接注入到方法中的，是方法所独有的。处理结果通过ModeMap返回给框架。在Spring整合时，SpringMVC的Controller Bean默认单例模式Singleton，所以默认对所有的请求，只会创建一个Controller，有应为没有共享的属性，所以是线程安全的，如果要改变默认的作用域，需要添加@Scope注解修改。</p><p>Struts2有自己的拦截Interceptor机制，SpringMVC这是用的是独立的Aop方式，这样导致Struts2的配置文件量还是比SpringMVC大。</p><h3 id="底层框架的不同"><a href="#底层框架的不同" class="headerlink" title="底层框架的不同"></a>底层框架的不同</h3><p>Struts2采用Filter（StrutsPrepareAndExecuteFilter）实现，SpringMVC（DispatcherServlet）则采用Servlet实现。Filter在容器启动之后即初始化；服务停止以后坠毁，晚于Servlet。Servlet在是在调用时初始化，先于Filter调用，服务停止后销毁。</p><h3 id="性能方面"><a href="#性能方面" class="headerlink" title="性能方面"></a>性能方面</h3><p>Struts2是类级别的拦截，每次请求对应实例一个新的Action，需要加载所有的属性值注入，SpringMVC实现了零配置，由于SpringMVC基于方法的拦截，有加载一次单例模式bean注入。所以，SpringMVC开发效率和性能高于Struts2。</p><h3 id="配置方面"><a href="#配置方面" class="headerlink" title="配置方面"></a>配置方面</h3><p>spring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高。</p><h2 id="8-如何避免-sql-注入？"><a href="#8-如何避免-sql-注入？" class="headerlink" title="8.如何避免 sql 注入？"></a>8.如何避免 sql 注入？</h2><ul><li><p>PreparedStatement（简单又有效的方法）</p></li><li><p>使用正则表达式过滤传入的参数</p></li><li><p>字符串过滤</p></li><li><p>JSP中调用该函数检查是否包函非法字符</p></li><li><p>JSP页面判断代码</p></li></ul><h2 id="9-什么是-XSS-攻击，如何避免？"><a href="#9-什么是-XSS-攻击，如何避免？" class="headerlink" title="9.什么是 XSS 攻击，如何避免？"></a>9.什么是 XSS 攻击，如何避免？</h2><p>XSS攻击又称CSS,全称Cross Site Script  （跨站脚本攻击），其原理是攻击者向有XSS漏洞的网站中输入恶意的 HTML 代码，当用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。XSS 攻击类似于 SQL 注入攻击，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过插入恶意脚本，实现对用户游览器的控制，获取用户的一些信息。 XSS是 Web 程序中常见的漏洞，XSS 属于被动式且用于客户端的攻击方式。</p><p>XSS防范的总体思路是：对输入(和URL参数)进行过滤，对输出进行编码。</p><h2 id="10-什么是-CSRF-攻击，如何避免？"><a href="#10-什么是-CSRF-攻击，如何避免？" class="headerlink" title="10.什么是 CSRF 攻击，如何避免？"></a>10.什么是 CSRF 攻击，如何避免？</h2><p>CSRF（Cross-site request forgery）也被称为 one-click attack或者 session riding，中文全称是叫跨站请求伪造。一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。常用于盗取账号、转账、发送虚假消息等。攻击者利用网站对请求的验证漏洞而实现这样的攻击行为，网站能够确认请求来源于用户的浏览器，却不能验证请求是否源于用户的真实意愿下的操作行为。</p><p><strong>如何避免：</strong></p><ol><li><p>验证 HTTP Referer 字段</p><blockquote><p>HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证Referer值来防御CSRF 攻击。</p></blockquote></li><li><p>使用验证码</p><blockquote><p>关键操作页面加上验证码，后台收到请求后通过判断验证码可以防御CSRF。但这种方法对用户不太友好。</p></blockquote></li><li><p>在请求地址中添加token并验证</p><blockquote><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于session之中，然后在每次请求时把token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。</p><blockquote><p>对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url/?csrftoken=tokenvalue%E3%80%82">http://url?csrftoken=tokenvalue。</a><br> 对于 POST 请求来说，要在 form 的最后加上 <input type="hidden" name="csrftoken" value="tokenvalue"/>，这样就把token以参数的形式加入请求了。</p></blockquote></blockquote></li><li><p>在HTTP 头中自定义属性并验证</p><blockquote><p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射</title>
    <link href="/2915143136.html"/>
    <url>/2915143136.html</url>
    
    <content type="html"><![CDATA[<h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h2 id="1-什么是反射？"><a href="#1-什么是反射？" class="headerlink" title="1.什么是反射？"></a>1.什么是反射？</h2><p>反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力</p><p>在Java运行时环境中，对于任意一个类，能否知道这个类有哪些属性和方法？对于任意一个对象，能否调用它的任意一个方法</p><p>Java反射机制主要提供了以下功能：</p><ul><li><p>在运行时判断任意一个对象所属的类。</p></li><li><p>在运行时构造任意一个类的对象。</p></li><li><p>在运行时判断任意一个类所具有的成员变量和方法。</p></li><li><p>在运行时调用任意一个对象的方法。 </p></li></ul><h2 id="2-什么是-java-序列化？什么情况下需要序列化？"><a href="#2-什么是-java-序列化？什么情况下需要序列化？" class="headerlink" title="2.什么是 java 序列化？什么情况下需要序列化？"></a>2.什么是 java 序列化？什么情况下需要序列化？</h2><p>简单说就是为了保存在内存中的各种对象的状态（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是序列化。</p><p>什么情况下需要序列化：</p><ul><li>当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；</li><li>当你想用套接字在网络上传送对象的时候；</li><li>当你想通过RMI传输对象的时候；</li></ul><h2 id="3-动态代理是什么？有哪些应用？"><a href="#3-动态代理是什么？有哪些应用？" class="headerlink" title="3.动态代理是什么？有哪些应用？"></a>3.动态代理是什么？有哪些应用？</h2><p>动态代理：</p><p>当想要给实现了某个接口的类中的方法，加一些额外的处理。比如说加日志，加事务等。可以给这个类创建一个代理，故名思议就是创建一个新的类，这个类不仅包含原来类方法的功能，而且还在原来的基础上添加了额外处理的新类。这个代理类并不是定义好的，是动态生成的。具有解耦意义，灵活，扩展性强。</p><p>动代理的应用：</p><ul><li><p>Spring的AOP</p></li><li><p>加事务</p></li><li><p>加权限</p></li><li><p>加日志</p></li></ul><h2 id="4-怎么实现动态代理？"><a href="#4-怎么实现动态代理？" class="headerlink" title="4.怎么实现动态代理？"></a>4.怎么实现动态代理？</h2><p>首先必须定义一个接口，还要有一个InvocationHandler(将实现接口的类的对象传递给它)处理类。</p><p>再有一个工具类Proxy(习惯性将其称为代理类，因为调用他的newInstance()可以产生代理对象,其实他只是一个产生代理对象的工具类）。</p><p>利用到InvocationHandler，拼接代理类源码，将其编译生成代理类的二进制码，利用加载器加载，并将其实例化产生代理对象，最后返回。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2730732825.html"/>
    <url>/2730732825.html</url>
    
    <content type="html"><![CDATA[<h2 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h2><h2 id="1-并行和并发有什么区别？"><a href="#1-并行和并发有什么区别？" class="headerlink" title="1.并行和并发有什么区别？"></a>1.并行和并发有什么区别？</h2><ul><li><p>并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。</p></li><li><p>并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。</p></li><li><p>在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。</p></li></ul><p>所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。</p><h2 id="2-线程和进程的区别？"><a href="#2-线程和进程的区别？" class="headerlink" title="2.线程和进程的区别？"></a>2.线程和进程的区别？</h2><p>简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。</p><h2 id="3-守护线程是什么？"><a href="#3-守护线程是什么？" class="headerlink" title="3.守护线程是什么？"></a>3.守护线程是什么？</h2><p>守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。</p><h2 id="4-创建线程有哪几种方式？"><a href="#4-创建线程有哪几种方式？" class="headerlink" title="4.创建线程有哪几种方式？"></a>4.创建线程有哪几种方式？</h2><h3 id="1-继承Thread类创建线程类"><a href="#1-继承Thread类创建线程类" class="headerlink" title="1.继承Thread类创建线程类"></a>1.继承Thread类创建线程类</h3><ul><li><p>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</p></li><li><p>创建Thread子类的实例，即创建了线程对象。</p></li><li><p>调用线程对象的start()方法来启动该线程。</p></li></ul><h3 id="2-通过Runnable接口创建线程类"><a href="#2-通过Runnable接口创建线程类" class="headerlink" title="2.通过Runnable接口创建线程类"></a>2.通过Runnable接口创建线程类</h3><ul><li><p>定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</p></li><li><p>创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</p></li><li><p>调用线程对象的start()方法来启动该线程。</p></li></ul><h3 id="3-通过Callable和Future创建线程"><a href="#3-通过Callable和Future创建线程" class="headerlink" title="3.通过Callable和Future创建线程"></a>3.通过Callable和Future创建线程</h3><ul><li><p>创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</p></li><li><p>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</p></li><li><p>使用FutureTask对象作为Thread对象的target创建并启动新线程。</p></li><li><p>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。需要注意的是在获取返回值时，获取返回值的线程会进入阻塞状态等待子线程结束后的返回值。</p></li></ul><h2 id="5-runnable-和-callable-有什么区别？"><a href="#5-runnable-和-callable-有什么区别？" class="headerlink" title="5.runnable 和 callable 有什么区别？"></a>5.runnable 和 callable 有什么区别？</h2><ul><li><p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；</p></li><li><p>Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p></li></ul><h2 id="6-线程有哪些状态？"><a href="#6-线程有哪些状态？" class="headerlink" title="6.线程有哪些状态？"></a>6.线程有哪些状态？</h2><p>线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。</p><ul><li><p>创建状态。在生成线程对象，并没有调用该对象的start方法，这时线程处于创建状态。</p></li><li><p>就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，等待线程调度程序调度运行。</p></li><li><p>运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。</p></li><li><p>阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。</p></li><li><p>死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 　　</p></li></ul><h2 id="7-sleep-和-wait-有什么区别？"><a href="#7-sleep-和-wait-有什么区别？" class="headerlink" title="7.sleep() 和 wait() 有什么区别？"></a>7.sleep() 和 wait() 有什么区别？</h2><ul><li><p>sleep()：sleep()方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep() 方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。</p></li><li><p>wait()：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程</p></li></ul><h2 id="8-锁池和等待池？"><a href="#8-锁池和等待池？" class="headerlink" title="8.锁池和等待池？"></a>8.锁池和等待池？</h2><ul><li><p>锁池:假设线程A已经拥有了某个对象(注意:不是类)的锁，而其它的线程想要调用这个对象的某个synchronized方法(或者synchronized块)，由于这些线程在进入对象的synchronized方法之前必须先获得该对象的锁的拥有权，但是该对象的锁目前正被线程A拥有，所以这些线程就进入了该对象的锁池中。</p></li><li><p>等待池:假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁后，进入到了该对象的等待池中</p></li></ul><h2 id="9-notify-和-notifyAll-有什么区别？"><a href="#9-notify-和-notifyAll-有什么区别？" class="headerlink" title="9.notify()和 notifyAll()有什么区别？"></a>9.notify()和 notifyAll()有什么区别？</h2><ul><li><p>如果线程调用了对象的wait()方法，那么线程便会处于该对象的<strong>等待池</strong>中，等待池中的线程<strong>不会去竞争该对象的锁</strong>。</p></li><li><p>当有线程调用了对象的 <strong>notifyAll()</strong> 方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争</p></li><li><p>优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它<strong>还会留在锁池中</strong>，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</p></li></ul><h2 id="10-线程的-run-和-start-有什么区别？"><a href="#10-线程的-run-和-start-有什么区别？" class="headerlink" title="10.线程的 run()和 start()有什么区别？"></a>10.线程的 run()和 start()有什么区别？</h2><ul><li><p>每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。</p></li><li><p>start()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码； 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， 这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。</p></li></ul><h2 id="11-创建线程池有哪几种方式？"><a href="#11-创建线程池有哪几种方式？" class="headerlink" title="11.创建线程池有哪几种方式？"></a>11.创建线程池有哪几种方式？</h2><h3 id="1-newFixedThreadPool-int-nThreads"><a href="#1-newFixedThreadPool-int-nThreads" class="headerlink" title="1.newFixedThreadPool(int nThreads)"></a>1.newFixedThreadPool(int nThreads)</h3><p>创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。</p><h3 id="2-newCachedThreadPool"><a href="#2-newCachedThreadPool" class="headerlink" title="2.newCachedThreadPool()"></a>2.newCachedThreadPool()</h3><p>创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。</p><h3 id="3-newSingleThreadExecutor"><a href="#3-newSingleThreadExecutor" class="headerlink" title="3.newSingleThreadExecutor()"></a>3.newSingleThreadExecutor()</h3><p>这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。</p><h3 id="4-newScheduledThreadPool-int-corePoolSize"><a href="#4-newScheduledThreadPool-int-corePoolSize" class="headerlink" title="4.newScheduledThreadPool(int corePoolSize)"></a>4.newScheduledThreadPool(int corePoolSize)</h3><p>创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。</p><h2 id="12-线程池都有哪些状态？"><a href="#12-线程池都有哪些状态？" class="headerlink" title="12.线程池都有哪些状态？"></a>12.线程池都有哪些状态？</h2><p>线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated。</p><p>线程池各个状态切换框架图：</p><p><img src="/img/posts/java/Thread_Pool.png" title="线程池状态切换图"></p><h3 id="1-RUNNING"><a href="#1-RUNNING" class="headerlink" title="1.RUNNING"></a>1.RUNNING</h3><ul><li><p>状态说明：线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理。 </p></li><li><p>状态切换：线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建，就处于RUNNING状态，并且线程池中的任务数为0。</p></li></ul><h3 id="2-SHUTDOWN"><a href="#2-SHUTDOWN" class="headerlink" title="2.SHUTDOWN"></a>2.SHUTDOWN</h3><ul><li><p>状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务。 </p></li><li><p>状态切换：调用线程池的shutdown()接口时，线程池由RUNNING -&gt; SHUTDOWN。</p></li></ul><h3 id="3-STOP"><a href="#3-STOP" class="headerlink" title="3.STOP"></a>3.STOP</h3><ul><li><p>状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。 </p></li><li><p>状态切换：调用线程池的shutdownNow()接口时，线程池由(RUNNING or SHUTDOWN ) -&gt; STOP。</p></li></ul><h3 id="4-TIDYING"><a href="#4-TIDYING" class="headerlink" title="4.TIDYING"></a>4.TIDYING</h3><ul><li><p>状态说明：当所有的任务已终止，线程池中记录的”任务数量”为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。terminated()在ThreadPoolExecutor类中是空的，若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重载terminated()函数来实现。 </p></li><li><p>状态切换：当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN -&gt; TIDYING。 当线程池在STOP状态下，线程池中执行的任务为空时，就会由STOP -&gt; TIDYING。</p></li></ul><h3 id="5-TERMINATED"><a href="#5-TERMINATED" class="headerlink" title="5.TERMINATED"></a>5.TERMINATED</h3><ul><li><p>状态说明：线程池彻底终止，就变成TERMINATED状态。 </p></li><li><p>状态切换：线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -&gt; TERMINATED。</p></li></ul><h2 id="13-线程池中-submit-和-execute-方法有什么区别？"><a href="#13-线程池中-submit-和-execute-方法有什么区别？" class="headerlink" title="13.线程池中 submit()和 execute()方法有什么区别？"></a>13.线程池中 submit()和 execute()方法有什么区别？</h2><ul><li><p>接收的参数不一样。</p></li><li><p>submit有返回值，而execute没有。</p></li><li><p>submit方便Exception处理。</p></li></ul><h2 id="14-在java程序中怎么保证多线程的运行安全？"><a href="#14-在java程序中怎么保证多线程的运行安全？" class="headerlink" title="14.在java程序中怎么保证多线程的运行安全？"></a>14.在java程序中怎么保证多线程的运行安全？</h2><p>线程安全在三个方面体现：</p><ul><li><p>原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）。</p></li><li><p>可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）。</p></li><li><p>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。</p></li></ul><h2 id="15-多线程锁的升级原理是什么？"><a href="#15-多线程锁的升级原理是什么？" class="headerlink" title="15.多线程锁的升级原理是什么？"></a>15.多线程锁的升级原理是什么？</h2><p>在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。</p><p>锁升级的图示过程： </p><p><img src="/img/posts/java/Lock_Upgrade.png" title="锁升级的过程"></p><blockquote><p>锁共有4种状态详解: <a href="http://ifeve.com/java-synchronized/">http://ifeve.com/java-synchronized/</a></p></blockquote><h2 id="16-什么是死锁？"><a href="#16-什么是死锁？" class="headerlink" title="16.什么是死锁？"></a>16.什么是死锁？</h2><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。</p><p>死锁的代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeadLock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建两个对象</span><br>        Object o1 = <span class="hljs-keyword">new</span> Object();<br>        Object o2 = <span class="hljs-keyword">new</span> Object();<br>        <span class="hljs-comment">// 两个线程公用两个对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread1(o1,o2);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread2(o1,o2);<br>        <span class="hljs-comment">// 开启两个线程</span><br>        <span class="hljs-comment">// 以下线程在锁住o1（o2）对象后等待一秒过去正打算锁住o2（o1）对象，但是发现o2（o1）对象已经被锁住。</span><br>        <span class="hljs-comment">// 这时两个线程将会进入到对象锁的锁池中等待，直至其中一个线程解锁对象（这是不可能滴...）。</span><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Thread1</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.o1 = o1;<br>        <span class="hljs-keyword">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (o1)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (o2)&#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Thread2</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.o1 = o1;<br>        <span class="hljs-keyword">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (o2)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (o1)&#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="17-怎么防止死锁？"><a href="#17-怎么防止死锁？" class="headerlink" title="17.怎么防止死锁？"></a>17.怎么防止死锁？</h2><p>死锁的四个必要条件：</p><ul><li><p>互斥条件：线程对所分配到的资源不允许其他线程进行访问，若其他线程访问该资源，只能等待，直至占有该资源的线程使用完成后释放该资源。</p></li><li><p>请求和保持条件：线程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他线程占有，此事请求阻塞，但又对自己获得的资源保持不放。</p></li><li><p>不可剥夺条件：是指线程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放。</p></li><li><p>环路等待条件：是指线程发生死锁后，若干线程之间形成一种头尾相接的循环等待资源关系。</p></li></ul><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。<br>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。<br>所以，在系统设计、线程调度等方面注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免线程永久占据系统资源。<br>此外，也要防止线程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</p><h2 id="18-ThreadLocal-是什么？有哪些使用场景？"><a href="#18-ThreadLocal-是什么？有哪些使用场景？" class="headerlink" title="18.ThreadLocal 是什么？有哪些使用场景？"></a>18.ThreadLocal 是什么？有哪些使用场景？</h2><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。<br>Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。<br>但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。<br>任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p><h2 id="19-synchronized-底层实现原理？"><a href="#19-synchronized-底层实现原理？" class="headerlink" title="19.synchronized 底层实现原理？"></a>19.synchronized 底层实现原理？</h2><p>synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。</p><p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p><ul><li><p>普通同步方法，锁是当前实例对象</p></li><li><p>静态同步方法，锁是当前类的class对象</p></li><li><p>同步方法块，锁是括号里面的对象</p></li></ul><h2 id="20-synchronized-和-volatile-的区别是什么？"><a href="#20-synchronized-和-volatile-的区别是什么？" class="headerlink" title="20.synchronized 和 volatile 的区别是什么？"></a>20.synchronized 和 volatile 的区别是什么？</h2><ul><li><p>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</p></li><li><p>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。</p></li><li><p>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。</p></li><li><p>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</p></li><li><p>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</p></li></ul><h2 id="21-synchronized-和-Lock-有什么区别？"><a href="#21-synchronized-和-Lock-有什么区别？" class="headerlink" title="21.synchronized 和 Lock 有什么区别？"></a>21.synchronized 和 Lock 有什么区别？</h2><ul><li><p>首先synchronized是java内置关键字，在jvm层面，Lock是个java类；</p></li><li><p>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</p></li><li><p>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</p></li><li><p>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</p></li><li><p>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；</p></li><li><p>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</p></li></ul><h2 id="22-synchronized-和-ReentrantLock-区别是什么？"><a href="#22-synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="22.synchronized 和 ReentrantLock 区别是什么？"></a>22.synchronized 和 ReentrantLock 区别是什么？</h2><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。<br>既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量。</p><p>ReentrantLock比synchronized的扩展性体现在几点上： </p><ul><li><p>ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 </p></li><li><p>ReentrantLock可以获取各种锁的信息</p></li><li><p>ReentrantLock可以灵活地实现多路通知 </p></li></ul><p>并且二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word。</p><h2 id="23-atomic的原理？"><a href="#23-atomic的原理？" class="headerlink" title="23.atomic的原理？"></a>23.atomic的原理？</h2><p>Atomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。</p><p>Atomic系列的类中的核心方法都会调用unsafe类中的几个本地方法。我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java容器</title>
    <link href="/1488394154.html"/>
    <url>/1488394154.html</url>
    
    <content type="html"><![CDATA[<h2 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h2><h2 id="1-java容器都有哪些？"><a href="#1-java容器都有哪些？" class="headerlink" title="1.java容器都有哪些？"></a>1.java容器都有哪些？</h2><p>常用容器的图录：</p><p><img src="/img/posts/java/Java_Container.png" title="Java容器图录"></p><h2 id="2-Collection-和-Collections-有什么区别？"><a href="#2-Collection-和-Collections-有什么区别？" class="headerlink" title="2.Collection 和 Collections 有什么区别？"></a>2.Collection 和 Collections 有什么区别？</h2><ul><li><p>java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</p></li><li><p>Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</p></li></ul><h2 id="3-List、Set、Map-之间的区别是什么？"><a href="#3-List、Set、Map-之间的区别是什么？" class="headerlink" title="3.List、Set、Map 之间的区别是什么？"></a>3.List、Set、Map 之间的区别是什么？</h2><p><img src="/img/posts/java/List_Set_Map.png" title="List、Set、Map之间的区别"></p><h2 id="4-HashMap-和-Hashtable-有什么区别？"><a href="#4-HashMap-和-Hashtable-有什么区别？" class="headerlink" title="4.HashMap 和 Hashtable 有什么区别？"></a>4.HashMap 和 Hashtable 有什么区别？</h2><ul><li><p>hashMap去掉了HashTable 的contains方法，但是加上了containsValue（）和containsKey（）方法。</p></li><li><p>hashTable同步的，而HashMap是非同步的，效率上比hashTable要高。</p></li><li><p>hashMap允许空键值，而hashTable不允许。</p></li></ul><h2 id="5-如何决定使用-HashMap-还是-TreeMap？"><a href="#5-如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="5.如何决定使用 HashMap 还是 TreeMap？"></a>5.如何决定使用 HashMap 还是 TreeMap？</h2><ul><li><p>TreeMap&lt;K,V&gt;的Key值是要求实现java.lang.Comparable，所以迭代的时候TreeMap默认是按照Key值升序排序的；TreeMap的实现是基于红黑树结构。适用于按自然顺序或自定义顺序遍历键（key）。</p></li><li><p>HashMap&lt;K,V&gt;的Key值实现散列hashCode()，分布是散列的、均匀的，不支持排序；数据结构主要是桶(数组)，链表或红黑树。适用于在Map中插入、删除和定位元素。</p></li></ul><p>如果你需要得到一个有序的结果时就应该使用TreeMap（因为HashMap中元素的排列顺序是不固定的）。除此之外，由于HashMap有更好的性能，所以大多不需要排序的时候我们会使用HashMap。</p><h2 id="6-说一下-HashMap-的实现原理？"><a href="#6-说一下-HashMap-的实现原理？" class="headerlink" title="6.说一下 HashMap 的实现原理？"></a>6.说一下 HashMap 的实现原理？</h2><p>HashMap概述：HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </p><p>HashMap的数据结构：在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p><p>当我们往Hashmap中put元素时，首先根据key的hashcode重新计算hash值，根据hash值得到这个元素在数组中的位置(下标)，如果该数组在该位置上已经存放了其他元素，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放入链尾。如果数组中该位置没有元素，就直接将该元素放到数组的该位置上。</p><p>需要注意 JDK 1.8 中对HashMap的实现做了优化，当链表中的节点数据超过八个之后，该链表会转为红黑树来提高查询效率，从原来的O(n)到O(logn)</p><h2 id="7-说一下-HashSet-的实现原理？"><a href="#7-说一下-HashSet-的实现原理？" class="headerlink" title="7.说一下 HashSet 的实现原理？"></a>7.说一下 HashSet 的实现原理？</h2><ul><li><p>HashSet底层由HashMap实现。</p></li><li><p>HashSet的值存放于HashMap的key上。</p></li><li><p>HashMap的value统一为PRESENT。</p></li></ul><h2 id="8-ArrayList-和-LinkedList-的区别是什么？"><a href="#8-ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="8.ArrayList 和 LinkedList 的区别是什么？"></a>8.ArrayList 和 LinkedList 的区别是什么？</h2><p>最明显的区别是 ArrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p><h2 id="9-如何实现数组和-List-之间的转换？"><a href="#9-如何实现数组和-List-之间的转换？" class="headerlink" title="9.如何实现数组和 List 之间的转换？"></a>9.如何实现数组和 List 之间的转换？</h2><ul><li><p>List转换成为数组：调用ArrayList的toArray方法。</p></li><li><p>数组转换成为List：调用Arrays的asList方法。</p></li></ul><h2 id="10-ArrayList-和-Vector-的区别是什么？"><a href="#10-ArrayList-和-Vector-的区别是什么？" class="headerlink" title="10.ArrayList 和 Vector 的区别是什么？"></a>10.ArrayList 和 Vector 的区别是什么？</h2><ul><li><p>Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。 </p></li><li><p>ArrayList比Vector快，它因为有同步，不会过载。 </p></li><li><p>ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</p></li></ul><h2 id="11-Array-和-ArrayList-有何区别？"><a href="#11-Array-和-ArrayList-有何区别？" class="headerlink" title="11.Array 和 ArrayList 有何区别？"></a>11.Array 和 ArrayList 有何区别？</h2><ul><li><p>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。 </p></li><li><p>Array是指定大小后不可变的，而ArrayList大小是可变的。 </p></li><li><p>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</p></li></ul><h2 id="12-在-Queue-中-poll-和-remove-有什么区别？"><a href="#12-在-Queue-中-poll-和-remove-有什么区别？" class="headerlink" title="12.在 Queue 中 poll()和 remove()有什么区别？"></a>12.在 Queue 中 poll()和 remove()有什么区别？</h2><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p><h2 id="13-哪些集合类是线程安全的？"><a href="#13-哪些集合类是线程安全的？" class="headerlink" title="13.哪些集合类是线程安全的？"></a>13.哪些集合类是线程安全的？</h2><ul><li><p>vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。</p></li><li><p>statck：堆栈类，先进后出。</p></li><li><p>hashtable：就比hashmap多了个线程安全。</p></li><li><p>enumeration：枚举，相当于迭代器。</p></li></ul><h2 id="14-迭代器-Iterator-是什么？"><a href="#14-迭代器-Iterator-是什么？" class="headerlink" title="14.迭代器 Iterator 是什么？"></a>14.迭代器 Iterator 是什么？</h2><p>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。</p><h2 id="15-Iterator-怎么使用？有什么特点？"><a href="#15-Iterator-怎么使用？有什么特点？" class="headerlink" title="15.Iterator 怎么使用？有什么特点？"></a>15.Iterator 怎么使用？有什么特点？</h2><p>Java中的Iterator功能比较简单，并且只能单向移动：</p><ol><li><p>使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p></li><li><p>使用next()获得序列中的下一个元素。</p></li><li><p>使用hasNext()检查序列中是否还有元素。</p></li><li><p>使用remove()将迭代器新返回的元素删除。　</p></li></ol><p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p><h2 id="16-Iterator-和-ListIterator-有什么区别？"><a href="#16-Iterator-和-ListIterator-有什么区别？" class="headerlink" title="16.Iterator 和 ListIterator 有什么区别？"></a>16.Iterator 和 ListIterator 有什么区别？</h2><ul><li><p>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 </p></li><li><p>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 </p></li><li><p>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/4159564061.html"/>
    <url>/4159564061.html</url>
    
    <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h2 id="1-JDK-和-JRE-有什么区别？"><a href="#1-JDK-和-JRE-有什么区别？" class="headerlink" title="1.JDK 和 JRE 有什么区别？"></a>1.JDK 和 JRE 有什么区别？</h2><ul><li><p>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</p></li><li><p>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</p></li></ul><p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p><h2 id="2-和-equals-的区别是什么？"><a href="#2-和-equals-的区别是什么？" class="headerlink" title="2.== 和 equals 的区别是什么？"></a>2.== 和 equals 的区别是什么？</h2><h3 id="解读"><a href="#解读" class="headerlink" title="== 解读"></a>== 解读</h3><p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p><ul><li><p>基本类型：比较的是值是否相同；</p></li><li><p>引用类型：比较的是引用是否相同；</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String x = <span class="hljs-string">&quot;string&quot;</span>;<br>String y = <span class="hljs-string">&quot;string&quot;</span>;<br>String z = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;string&quot;</span>);<br>System.out.println(x==y); <span class="hljs-comment">// true</span><br>System.out.println(x==z); <span class="hljs-comment">// false</span><br>System.out.println(x.equals(y)); <span class="hljs-comment">// true</span><br>System.out.println(x.equals(z)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。</p><h3 id="equals-解读"><a href="#equals-解读" class="headerlink" title="equals 解读"></a>equals 解读</h3><p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。</p><p>首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br>Cat c1 = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;王磊&quot;</span>);<br>Cat c2 = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;王磊&quot;</span>);<br>System.out.println(c1.equals(c2)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>原来 equals 本质上就是 ==。</p><p>那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;老王&quot;</span>);<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;老王&quot;</span>);<br>System.out.println(s1.equals(s2)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        String anotherString = (String)anObject;<br>        <span class="hljs-keyword">int</span> n = value.length;<br>        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>            <span class="hljs-keyword">char</span> v1[] = value;<br>            <span class="hljs-keyword">char</span> v2[] = anotherString.value;<br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。</p><p><strong>总结：</strong>== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重写了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p><h2 id="3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？"></a>3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h2><p>不对，两个对象的 hashCode()相同，equals()不一定 true。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1 = <span class="hljs-string">&quot;通话&quot;</span>;<br>String str2 = <span class="hljs-string">&quot;重地&quot;</span>;<br>System.out.println(String.format(<span class="hljs-string">&quot;str1：%d | str2：%d&quot;</span>,  str1.hashCode(),str2.hashCode())); <span class="hljs-comment">// str1：1179395 | str2：1179395</span><br>System.out.println(str1.equals(str2)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>代码解读：很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p><h2 id="4-final-在-java-中有什么作用？"><a href="#4-final-在-java-中有什么作用？" class="headerlink" title="4.final 在 java 中有什么作用？"></a>4.final 在 java 中有什么作用？</h2><ul><li><p>final 修饰的类叫最终类，该类不能被继承。</p></li><li><p>final 修饰的方法不能被重写。</p></li><li><p>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</p></li></ul><h2 id="5-java-中的-Math-round-1-5-等于多少？"><a href="#5-java-中的-Math-round-1-5-等于多少？" class="headerlink" title="5.java 中的 Math.round(-1.5) 等于多少？"></a>5.java 中的 Math.round(-1.5) 等于多少？</h2><p>等于 -1。</p><h2 id="6-String-属于基础的数据类型吗？"><a href="#6-String-属于基础的数据类型吗？" class="headerlink" title="6.String 属于基础的数据类型吗？"></a>6.String 属于基础的数据类型吗？</h2><p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p><h2 id="7-java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#7-java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="7.java 中操作字符串都有哪些类？它们之间有什么区别？"></a>7.java 中操作字符串都有哪些类？它们之间有什么区别？</h2><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p><p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p><p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p><h2 id="8-String-str-“i”-与-String-str-new-String-“i”-一样吗？"><a href="#8-String-str-“i”-与-String-str-new-String-“i”-一样吗？" class="headerlink" title="8.String str = “i” 与 String str = new String(“i”) 一样吗？"></a>8.String str = “i” 与 String str = new String(“i”) 一样吗？</h2><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。</p><h2 id="9-如何将字符串反转？"><a href="#9-如何将字符串反转？" class="headerlink" title="9.如何将字符串反转？"></a>9.如何将字符串反转？</h2><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// StringBuffer reverse</span><br>StringBuffer stringBuffer = <span class="hljs-keyword">new</span> StringBuffer();<br>stringBuffer.append(<span class="hljs-string">&quot;abcdefg&quot;</span>);<br>System.out.println(stringBuffer.reverse()); <span class="hljs-comment">// gfedcba</span><br><br><span class="hljs-comment">// StringBuilder reverse</span><br>StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>stringBuilder.append(<span class="hljs-string">&quot;abcdefg&quot;</span>);<br>System.out.println(stringBuilder.reverse()); <span class="hljs-comment">// gfedcba</span><br></code></pre></td></tr></table></figure><h2 id="10-String-类的常用方法都有那些？"><a href="#10-String-类的常用方法都有那些？" class="headerlink" title="10.String 类的常用方法都有那些？"></a>10.String 类的常用方法都有那些？</h2><ul><li><p>s.length()：返回字符串长度。</p></li><li><p>s.trim()：去除字符串两端空白。</p></li><li><p>s.getBytes()：返回字符串的 byte 类型数组。</p></li><li><p>s.toLowerCase()：将字符串转成小写字母。</p></li><li><p>s.toUpperCase()：将字符串转成大写字符。</p></li><li><p>indexOf(String s)：返回指定字符第一次出现的索引。</p></li><li><p>lastIndexOf(String s): 返回指定字符最后一次出现的索引。</p></li><li><p>charAt(int index)：返回指定索引处的字符。</p></li><li><p>replace(String old, String new)：字符串替换。</p></li><li><p>split(String s)：分割字符串，返回一个分割后的字符串数组。</p></li><li><p>substring(int start, int end)：截取字符串。</p></li><li><p>equals(String targetString)：字符串比较。</p></li></ul><h2 id="11-抽象类必须要有抽象方法吗？"><a href="#11-抽象类必须要有抽象方法吗？" class="headerlink" title="11.抽象类必须要有抽象方法吗？"></a>11.抽象类必须要有抽象方法吗？</h2><p>不需要，抽象类不一定非要有抽象方法。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">base</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码，抽象类并没有抽象方法但完全可以正常运行。</p><h2 id="12-普通类和抽象类有哪些区别？"><a href="#12-普通类和抽象类有哪些区别？" class="headerlink" title="12.普通类和抽象类有哪些区别？"></a>12.普通类和抽象类有哪些区别？</h2><ul><li><p>普通类不能包含抽象方法，抽象类可以包含抽象方法。</p></li><li><p>抽象类不能直接实例化，普通类可以直接实例化。</p></li></ul><h2 id="13-抽象类能使用-final-修饰吗？"><a href="#13-抽象类能使用-final-修饰吗？" class="headerlink" title="13.抽象类能使用 final 修饰吗？"></a>13.抽象类能使用 final 修饰吗？</h2><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，编辑器也会提示错误信息：</p><p><code>Illegal combination of modifiers: &#39;final&#39; and &#39;abstract&#39;</code></p><h2 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14.接口和抽象类有什么区别？"></a>14.接口和抽象类有什么区别？</h2><ul><li><p>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</p></li><li><p>构造函数：抽象类可以有构造函数；接口不能有。</p></li><li><p>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。</p></li><li><p>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</p></li><li><p>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</p></li></ul><h2 id="15-java-中-IO-流分为几种？"><a href="#15-java-中-IO-流分为几种？" class="headerlink" title="15.java 中 IO 流分为几种？"></a>15.java 中 IO 流分为几种？</h2><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p><h2 id="16-BIO、NIO、AIO-有什么区别？"><a href="#16-BIO、NIO、AIO-有什么区别？" class="headerlink" title="16.BIO、NIO、AIO 有什么区别？"></a>16.BIO、NIO、AIO 有什么区别？</h2><ul><li><p>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</p></li><li><p>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</p></li><li><p>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</p></li></ul><h2 id="17-Files的常用方法都有哪些？"><a href="#17-Files的常用方法都有哪些？" class="headerlink" title="17.Files的常用方法都有哪些？"></a>17.Files的常用方法都有哪些？</h2><ul><li><p>Files.exists()：检测文件路径是否存在。</p></li><li><p>Files.createFile()：创建文件。</p></li><li><p>Files.createDirectory()：创建文件夹。</p></li><li><p>Files.delete()：删除一个文件或目录。</p></li><li><p>Files.copy()：将文件复制到目标文件。</p></li><li><p>Files.move()：移动文件或重命名为目标文件。</p></li><li><p>Files.size()：返回文件的大小(以字节为单位)。</p></li><li><p>Files.read()：读取文件。</p></li><li><p>Files.write()：写入文件。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法详解</title>
    <link href="/262625226.html"/>
    <url>/262625226.html</url>
    
    <content type="html"><![CDATA[<h2 id="Markdown语法详解"><a href="#Markdown语法详解" class="headerlink" title="Markdown语法详解"></a>Markdown语法详解</h2><blockquote><p>.md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言。现在很多前段项目中的说明文件readme等都是用.md文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个程序猿更要学会使用这种语言。下面就简单和大家分享一些.md基本语法。</p></blockquote><h2 id="一、基本符号：-gt"><a href="#一、基本符号：-gt" class="headerlink" title="一、基本符号：* - +. &gt;"></a>一、基本符号：* - +. &gt;</h2><blockquote><p>基本上所有的markdown标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。</p></blockquote><hr><h2 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h2><ol><li>前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure><ol start="2"><li>相当于标签闭合</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题 #</span><br><span class="hljs-section">## 二级标题 ##</span><br><span class="hljs-section">### 三级标题 ###</span><br><span class="hljs-section">#### 四级标题 ####</span><br><span class="hljs-section">##### 五级标题 #####</span><br><span class="hljs-section">###### 六级标题 #####</span><br></code></pre></td></tr></table></figure><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><ol><li>无序列表</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">+</span> a<br><span class="hljs-bullet">-</span> b<br><span class="hljs-bullet">*</span> c<br></code></pre></td></tr></table></figure><p>以上三种方式效果一致</p><ul><li>abc</li></ul><ol start="2"><li>有序列表</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正常<br><span class="hljs-bullet">1.</span> abc<br><span class="hljs-bullet">2.</span> bcd<br><span class="hljs-bullet">3.</span> cde<br>错序<br><span class="hljs-bullet">2.</span> fgh<br><span class="hljs-bullet">4.</span> ghi<br><span class="hljs-bullet">5.</span> hij<br></code></pre></td></tr></table></figure><ol start="3"><li>嵌套列表 </li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//无序列表嵌套<br><span class="hljs-bullet">+</span> 123<br><span class="hljs-bullet">    +</span> abc<br><span class="hljs-bullet">    +</span> bcd<br><span class="hljs-bullet">    +</span> cde<br><span class="hljs-bullet">+</span> 465<br><span class="hljs-bullet">+</span> 789<br>//有序列表嵌套<br><span class="hljs-bullet">1.</span> abcd<br><span class="hljs-bullet">    1.</span> abcde<br><span class="hljs-bullet">    2.</span> abcde<br><span class="hljs-bullet">    3.</span> abcde<br><span class="hljs-bullet">2.</span> bcde<br><span class="hljs-bullet">3.</span> cdef<br></code></pre></td></tr></table></figure><ul><li>123<ul><li>abc</li><li>bcd</li><li>cde</li></ul></li><li>465</li><li>789</li></ul><ol><li>abcd<ol><li>abcde</li><li>abcde</li><li>abcde</li></ol></li><li>bcde</li><li>cdef</li></ol><h2 id="四、引用说明区块"><a href="#四、引用说明区块" class="headerlink" title="四、引用说明区块"></a>四、引用说明区块</h2><blockquote><p>对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。</p></blockquote><ol><li>正常形式</li></ol><blockquote><p>引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</p></blockquote><ol start="2"><li>嵌套区块</li></ol><blockquote><p>这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 一级引用</span><br>&gt;&gt; 二级引用<br>&gt;&gt;&gt; 三级引用<br>&gt;&gt;&gt;&gt; 四级引用<br>&gt;&gt;&gt;&gt;&gt; 五级引用<br>&gt;&gt;&gt;&gt;&gt;&gt; 六级引用<br></code></pre></td></tr></table></figure><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p><blockquote><p>四级引用</p><blockquote><p>五级引用</p><blockquote><p>六级引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="五、代码块"><a href="#五、代码块" class="headerlink" title="五、代码块"></a>五、代码块</h2><blockquote><p>在发布一些技术文章会涉及展示代码的问题，这时候代码块就显得尤为重要。</p></blockquote><ol><li>少量代码，单行使用，直接用`包裹起来就行了</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">`少量代码，单行使用`</span><br></code></pre></td></tr></table></figure><p><code>少量代码，单行使用</code></p><ol start="2"><li>大量代码，需要多行使用，用```包裹起来</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">``` </span><br><span class="hljs-code">    大量代码，需要多行使用</span><br><span class="hljs-code">    大量代码，需要多行使用</span><br><span class="hljs-code">    大量代码，需要多行使用</span><br><span class="hljs-code">``` </span><br></code></pre></td></tr></table></figure><h2 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h2><ol><li>行内式</li></ol><blockquote><p>链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">哔哩哔哩</span>](<span class="hljs-link">https://www.bilibili.com/ &quot;哔哩哔哩( ゜- ゜</span>)つロ 乾杯~&quot;)，是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。<br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/" title="哔哩哔哩( ゜- ゜)つロ 乾杯~">哔哩哔哩</a>，是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。</p><ol start="2"><li>参数式</li></ol><blockquote><p>链接的文字放在[]中，链接地址放在随后的:后，链接地址后面空一格，然后用引号引起来</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-symbol">哔哩哔哩</span>]: <span class="hljs-link">https://www.bilibili.com/ &quot;哔哩哔哩( ゜- ゜)つロ 乾杯~&quot;</span><br>[哔哩哔哩]是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。<br>其他写法<br>[<span class="hljs-symbol">哔哩哔哩</span>]: <span class="hljs-link">https://www.bilibili.com/ &#x27;哔哩哔哩( ゜- ゜)つロ 乾杯~&#x27;</span><br>[<span class="hljs-symbol">哔哩哔哩</span>]: <span class="hljs-link">https://www.bilibili.com/ (哔哩哔哩( ゜- ゜)つロ 乾杯~)</span><br>[<span class="hljs-symbol">哔哩哔哩</span>]: <span class="hljs-link">&lt;https://www.bilibili.com/&gt; &quot;哔哩哔哩( ゜- ゜)つロ 乾杯~&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/" title="哔哩哔哩( ゜- ゜)つロ 乾杯~">哔哩哔哩</a>是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。</p><h2 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h2><ol><li>行内式</li></ol><blockquote><p>和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">dog.png</span>](<span class="hljs-link">https://pic2.zhimg.com/80/v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png &quot;小狗&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png" alt="dog.png" title="小狗"></p><ol start="2"><li>参数式</li></ol><blockquote><p>图片的文字放在[]中，图片地址放在随后的:后，title属性（图片地址后面空一格，然后用引号引起来）,注意引用图片的时候在[]前要加上!</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-symbol">dog.png</span>]: <span class="hljs-link">https://pic2.zhimg.com/80/v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png &quot;小狗&quot;</span><br>![dog.png]<br>[<span class="hljs-symbol">dog.png</span>]: <span class="hljs-link">https://pic2.zhimg.com/80/v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png &#x27;小狗&#x27;</span><br>[<span class="hljs-symbol">dog.png</span>]: <span class="hljs-link">https://pic2.zhimg.com/80/v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png (小狗)</span><br>[<span class="hljs-symbol">dog.png</span>]: <span class="hljs-link">&lt;https://pic2.zhimg.com/80/v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png&gt; &quot;小狗&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-fa227ca1c5a01003d4901ba4ec0a081f_400x224.png" alt="dog.png" title="小狗"></p><h2 id="八、分割线"><a href="#八、分割线" class="headerlink" title="八、分割线"></a>八、分割线</h2><blockquote><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br><span class="hljs-bullet">-</span> - -<br>------<br><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">*</span> <span class="hljs-emphasis">* *</span></span><br><span class="hljs-strong">**</span><span class="hljs-strong">****</span><br><span class="hljs-strong">__<span class="hljs-emphasis">_</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">_</span> <span class="hljs-emphasis">_ _</span></span><br><span class="hljs-strong">__</span><span class="hljs-strong">____</span><br></code></pre></td></tr></table></figure><p>以上代码的效果一致：</p><hr><h2 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h2><ol><li>强调字体</li></ol><blockquote><p>一个星号或者是一个下划线包起来，会转换为倾斜，如果是2个，会转换为加粗</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*Markdown*</span>    <br><span class="hljs-strong">**Markdown**</span><br><span class="hljs-emphasis">_Markdown_</span>   <br><span class="hljs-strong">__Markdown__</span><br></code></pre></td></tr></table></figure><p><em>Markdown</em><br><strong>Markdown</strong><br><em>Markdown</em><br><strong>Markdown</strong></p><ol start="2"><li>转义</li></ol><blockquote><p>基本上和js转义一样,\加需要转义的字符</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\\<br>\<span class="hljs-emphasis">*</span><br><span class="hljs-emphasis">\+</span><br><span class="hljs-emphasis">\-</span><br><span class="hljs-emphasis">\`</span><br><span class="hljs-emphasis">\_</span><br></code></pre></td></tr></table></figure><ol start="3"><li>删除线</li></ol><blockquote><p>用~~把需要显示删除线的字符包裹起来</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">~~删除~~<br></code></pre></td></tr></table></figure><p><del>删除</del></p><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs markdown">栗子一<br>|123|234|345|<br>|:-|:-:|-:|<br>|abc|bcd|cde|<br>|abc|bcd|cde|<br>|abc|bcd|cde|<br><br>栗子二<br>|123|234|345|<br>|:---|:---:|---:|<br>|abc|bcd|cde|<br>|abc|bcd|cde|<br>|abc|bcd|cde|<br><br>栗子三<br>123|234|345<br>:-|:-:|-:<br>abc|bcd|cde<br>abc|bcd|cde<br>abc|bcd|cde<br></code></pre></td></tr></table></figure><blockquote><p>上面三个例子的效果一样，由此可得：</p><ol><li>表格的格式不一定要对的非常起，但是为了良好的变成风格，尽量对齐是最好的</li><li>分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</li></ol></blockquote><table><thead><tr><th align="left">123</th><th align="center">234</th><th align="right">345</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table><blockquote><p>这篇文章的编写借鉴了很多网友的经验，同时鉴赏我自己的总结，跟大家一起分享了。<br>即使遇到了不幸的灾难，已经开始了的事情决不放弃!</p></blockquote><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://blog.csdn.net/witnessai1/article/details/52551362">Markdown 语法手册 （完整整理版）</a><br><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
